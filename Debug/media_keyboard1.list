
media_keyboard1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002678  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002784  08002784  00012784  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080027f8  080027f8  000127f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080027fc  080027fc  000127fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000100  20000000  08002800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008bc  20000100  08002900  00020100  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200009bc  08002900  000209bc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
  9 .debug_info   000151a8  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003245  00000000  00000000  000352d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000840  00000000  00000000  00038518  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b38  00000000  00000000  00038d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000547d  00000000  00000000  00039890  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002b55  00000000  00000000  0003ed0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00041862  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001380  00000000  00000000  000418e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0000470f  00000000  00000000  00042c60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000100 	.word	0x20000100
 8000128:	00000000 	.word	0x00000000
 800012c:	0800276c 	.word	0x0800276c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000104 	.word	0x20000104
 8000148:	0800276c 	.word	0x0800276c

0800014c <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800014c:	2228      	movs	r2, #40	; 0x28
{
 800014e:	b570      	push	{r4, r5, r6, lr}
 8000150:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000152:	eb0d 0002 	add.w	r0, sp, r2
 8000156:	2100      	movs	r1, #0
 8000158:	f002 fb00 	bl	800275c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800015c:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800015e:	2610      	movs	r6, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000160:	eb0d 0002 	add.w	r0, sp, r2
 8000164:	2100      	movs	r1, #0
 8000166:	f002 faf9 	bl	800275c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800016a:	4632      	mov	r2, r6
 800016c:	2100      	movs	r1, #0
 800016e:	a801      	add	r0, sp, #4
 8000170:	f002 faf4 	bl	800275c <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000174:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000178:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800017a:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800017c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800017e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000180:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000184:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000186:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000188:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800018a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800018c:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800018e:	f000 fe63 	bl	8000e58 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000192:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000194:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000196:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000198:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800019c:	4629      	mov	r1, r5
 800019e:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001a0:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001a2:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001a4:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001a6:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001a8:	f001 f81e 	bl	80011e8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001ac:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001ae:	9601      	str	r6, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80001b0:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001b2:	f001 f8cb 	bl	800134c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80001b6:	b014      	add	sp, #80	; 0x50
 80001b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080001bc <main>:
	 __uint8_t buffer[4]={0,0,0,0};
 80001bc:	2400      	movs	r4, #0
{
 80001be:	b500      	push	{lr}
 80001c0:	b089      	sub	sp, #36	; 0x24
	 __uint8_t buffer[4]={0,0,0,0};
 80001c2:	9400      	str	r4, [sp, #0]
  HAL_Init();
 80001c4:	f000 f8de 	bl	8000384 <HAL_Init>
  buffer[1]=10;
 80001c8:	230a      	movs	r3, #10
 80001ca:	f88d 3001 	strb.w	r3, [sp, #1]
  SystemClock_Config();
 80001ce:	f7ff ffbd 	bl	800014c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d2:	2210      	movs	r2, #16
 80001d4:	4621      	mov	r1, r4
 80001d6:	eb0d 0002 	add.w	r0, sp, r2
 80001da:	f002 fabf 	bl	800275c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001de:	4b26      	ldr	r3, [pc, #152]	; (8000278 <main+0xbc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 80001e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 80001e6:	4825      	ldr	r0, [pc, #148]	; (800027c <main+0xc0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e8:	f042 0210 	orr.w	r2, r2, #16
 80001ec:	619a      	str	r2, [r3, #24]
 80001ee:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : led1_Pin */
  GPIO_InitStruct.Pin = led1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f0:	2502      	movs	r5, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001f2:	f002 0210 	and.w	r2, r2, #16
 80001f6:	9201      	str	r2, [sp, #4]
 80001f8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001fa:	699a      	ldr	r2, [r3, #24]
 80001fc:	f042 0220 	orr.w	r2, r2, #32
 8000200:	619a      	str	r2, [r3, #24]
 8000202:	699a      	ldr	r2, [r3, #24]
 8000204:	f002 0220 	and.w	r2, r2, #32
 8000208:	9202      	str	r2, [sp, #8]
 800020a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020c:	699a      	ldr	r2, [r3, #24]
 800020e:	f042 0204 	orr.w	r2, r2, #4
 8000212:	619a      	str	r2, [r3, #24]
 8000214:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000216:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000218:	f003 0304 	and.w	r3, r3, #4
 800021c:	9303      	str	r3, [sp, #12]
 800021e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000220:	f000 fa2e 	bl	8000680 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = led1_Pin;
 8000224:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000228:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800022a:	2301      	movs	r3, #1
  HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 800022c:	a904      	add	r1, sp, #16
 800022e:	4813      	ldr	r0, [pc, #76]	; (800027c <main+0xc0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000230:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000232:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000234:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 8000236:	f000 f943 	bl	80004c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PREVIOUSSONG_Pin PLAYPAUSE_Pin NEXTSONG_Pin */
  GPIO_InitStruct.Pin = PREVIOUSSONG_Pin|PLAYPAUSE_Pin|NEXTSONG_Pin;
 800023a:	2307      	movs	r3, #7
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800023c:	a904      	add	r1, sp, #16
 800023e:	4810      	ldr	r0, [pc, #64]	; (8000280 <main+0xc4>)
  GPIO_InitStruct.Pin = PREVIOUSSONG_Pin|PLAYPAUSE_Pin|NEXTSONG_Pin;
 8000240:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000242:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000244:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000246:	f000 f93b 	bl	80004c0 <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();
 800024a:	f002 f8c1 	bl	80023d0 <MX_USB_DEVICE_Init>
	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800024e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	  USBD_HID_SendReport(  &hUsbDeviceFS,buffer,4);
 8000252:	4d0c      	ldr	r5, [pc, #48]	; (8000284 <main+0xc8>)
	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000254:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	  USBD_HID_SendReport(  &hUsbDeviceFS,buffer,4);
 8000258:	2204      	movs	r2, #4
 800025a:	4669      	mov	r1, sp
 800025c:	4628      	mov	r0, r5
 800025e:	f001 fd97 	bl	8001d90 <USBD_HID_SendReport>
	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000262:	4620      	mov	r0, r4
 8000264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000268:	f000 fa0f 	bl	800068a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800026c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000270:	f000 f8ac 	bl	80003cc <HAL_Delay>
 8000274:	e7f0      	b.n	8000258 <main+0x9c>
 8000276:	bf00      	nop
 8000278:	40021000 	.word	0x40021000
 800027c:	40011000 	.word	0x40011000
 8000280:	40010800 	.word	0x40010800
 8000284:	20000138 	.word	0x20000138

08000288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000288:	4770      	bx	lr
	...

0800028c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800028c:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <HAL_MspInit+0x3c>)
{
 800028e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000290:	699a      	ldr	r2, [r3, #24]
 8000292:	f042 0201 	orr.w	r2, r2, #1
 8000296:	619a      	str	r2, [r3, #24]
 8000298:	699a      	ldr	r2, [r3, #24]
 800029a:	f002 0201 	and.w	r2, r2, #1
 800029e:	9200      	str	r2, [sp, #0]
 80002a0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002a2:	69da      	ldr	r2, [r3, #28]
 80002a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80002a8:	61da      	str	r2, [r3, #28]
 80002aa:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002ac:	4a07      	ldr	r2, [pc, #28]	; (80002cc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002b2:	9301      	str	r3, [sp, #4]
 80002b4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002b6:	6853      	ldr	r3, [r2, #4]
 80002b8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002c2:	b002      	add	sp, #8
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40021000 	.word	0x40021000
 80002cc:	40010000 	.word	0x40010000

080002d0 <NMI_Handler>:
 80002d0:	4770      	bx	lr

080002d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002d2:	e7fe      	b.n	80002d2 <HardFault_Handler>

080002d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d4:	e7fe      	b.n	80002d4 <MemManage_Handler>

080002d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002d6:	e7fe      	b.n	80002d6 <BusFault_Handler>

080002d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002d8:	e7fe      	b.n	80002d8 <UsageFault_Handler>

080002da <SVC_Handler>:
 80002da:	4770      	bx	lr

080002dc <DebugMon_Handler>:
 80002dc:	4770      	bx	lr

080002de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002de:	4770      	bx	lr

080002e0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002e0:	f000 b862 	b.w	80003a8 <HAL_IncTick>

080002e4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80002e4:	4801      	ldr	r0, [pc, #4]	; (80002ec <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80002e6:	f000 badb 	b.w	80008a0 <HAL_PCD_IRQHandler>
 80002ea:	bf00      	nop
 80002ec:	2000055c 	.word	0x2000055c

080002f0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80002f0:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <SystemInit+0x40>)
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	f042 0201 	orr.w	r2, r2, #1
 80002f8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80002fa:	6859      	ldr	r1, [r3, #4]
 80002fc:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <SystemInit+0x44>)
 80002fe:	400a      	ands	r2, r1
 8000300:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000308:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800030c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000314:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000316:	685a      	ldr	r2, [r3, #4]
 8000318:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800031c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800031e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000322:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000324:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <SystemInit+0x48>)
 800032a:	609a      	str	r2, [r3, #8]
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40021000 	.word	0x40021000
 8000334:	f8ff0000 	.word	0xf8ff0000
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800033c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <HAL_InitTick+0x3c>)
{
 8000340:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000342:	7818      	ldrb	r0, [r3, #0]
 8000344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000348:	fbb3 f3f0 	udiv	r3, r3, r0
 800034c:	4a0b      	ldr	r2, [pc, #44]	; (800037c <HAL_InitTick+0x40>)
 800034e:	6810      	ldr	r0, [r2, #0]
 8000350:	fbb0 f0f3 	udiv	r0, r0, r3
 8000354:	f000 f89e 	bl	8000494 <HAL_SYSTICK_Config>
 8000358:	4604      	mov	r4, r0
 800035a:	b958      	cbnz	r0, 8000374 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800035c:	2d0f      	cmp	r5, #15
 800035e:	d809      	bhi.n	8000374 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000360:	4602      	mov	r2, r0
 8000362:	4629      	mov	r1, r5
 8000364:	f04f 30ff 	mov.w	r0, #4294967295
 8000368:	f000 f854 	bl	8000414 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800036c:	4b04      	ldr	r3, [pc, #16]	; (8000380 <HAL_InitTick+0x44>)
 800036e:	4620      	mov	r0, r4
 8000370:	601d      	str	r5, [r3, #0]
 8000372:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000374:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000376:	bd38      	pop	{r3, r4, r5, pc}
 8000378:	20000004 	.word	0x20000004
 800037c:	20000000 	.word	0x20000000
 8000380:	20000008 	.word	0x20000008

08000384 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000384:	4a07      	ldr	r2, [pc, #28]	; (80003a4 <HAL_Init+0x20>)
{
 8000386:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000388:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800038a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800038c:	f043 0310 	orr.w	r3, r3, #16
 8000390:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000392:	f000 f82d 	bl	80003f0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000396:	2000      	movs	r0, #0
 8000398:	f7ff ffd0 	bl	800033c <HAL_InitTick>
  HAL_MspInit();
 800039c:	f7ff ff76 	bl	800028c <HAL_MspInit>
}
 80003a0:	2000      	movs	r0, #0
 80003a2:	bd08      	pop	{r3, pc}
 80003a4:	40022000 	.word	0x40022000

080003a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80003a8:	4a03      	ldr	r2, [pc, #12]	; (80003b8 <HAL_IncTick+0x10>)
 80003aa:	4b04      	ldr	r3, [pc, #16]	; (80003bc <HAL_IncTick+0x14>)
 80003ac:	6811      	ldr	r1, [r2, #0]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	440b      	add	r3, r1
 80003b2:	6013      	str	r3, [r2, #0]
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	20000134 	.word	0x20000134
 80003bc:	20000004 	.word	0x20000004

080003c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80003c0:	4b01      	ldr	r3, [pc, #4]	; (80003c8 <HAL_GetTick+0x8>)
 80003c2:	6818      	ldr	r0, [r3, #0]
}
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	20000134 	.word	0x20000134

080003cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003cc:	b538      	push	{r3, r4, r5, lr}
 80003ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003d0:	f7ff fff6 	bl	80003c0 <HAL_GetTick>
 80003d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003d6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80003d8:	bf1e      	ittt	ne
 80003da:	4b04      	ldrne	r3, [pc, #16]	; (80003ec <HAL_Delay+0x20>)
 80003dc:	781b      	ldrbne	r3, [r3, #0]
 80003de:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003e0:	f7ff ffee 	bl	80003c0 <HAL_GetTick>
 80003e4:	1b40      	subs	r0, r0, r5
 80003e6:	4284      	cmp	r4, r0
 80003e8:	d8fa      	bhi.n	80003e0 <HAL_Delay+0x14>
  {
  }
}
 80003ea:	bd38      	pop	{r3, r4, r5, pc}
 80003ec:	20000004 	.word	0x20000004

080003f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003f0:	4a07      	ldr	r2, [pc, #28]	; (8000410 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80003f2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003f4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80003f6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80003fe:	041b      	lsls	r3, r3, #16
 8000400:	0c1b      	lsrs	r3, r3, #16
 8000402:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800040a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800040c:	60d3      	str	r3, [r2, #12]
 800040e:	4770      	bx	lr
 8000410:	e000ed00 	.word	0xe000ed00

08000414 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000414:	4b17      	ldr	r3, [pc, #92]	; (8000474 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	68dc      	ldr	r4, [r3, #12]
 800041a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800041e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000422:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000424:	2b04      	cmp	r3, #4
 8000426:	bf28      	it	cs
 8000428:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800042a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800042c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000430:	bf98      	it	ls
 8000432:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000434:	fa05 f303 	lsl.w	r3, r5, r3
 8000438:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800043c:	bf88      	it	hi
 800043e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000440:	4019      	ands	r1, r3
 8000442:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000444:	fa05 f404 	lsl.w	r4, r5, r4
 8000448:	3c01      	subs	r4, #1
 800044a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800044c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800044e:	ea42 0201 	orr.w	r2, r2, r1
 8000452:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000456:	bfaf      	iteee	ge
 8000458:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800045c:	4b06      	ldrlt	r3, [pc, #24]	; (8000478 <HAL_NVIC_SetPriority+0x64>)
 800045e:	f000 000f 	andlt.w	r0, r0, #15
 8000462:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000464:	bfa5      	ittet	ge
 8000466:	b2d2      	uxtbge	r2, r2
 8000468:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800046c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800046e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	e000ed00 	.word	0xe000ed00
 8000478:	e000ed14 	.word	0xe000ed14

0800047c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800047c:	2301      	movs	r3, #1
 800047e:	0942      	lsrs	r2, r0, #5
 8000480:	f000 001f 	and.w	r0, r0, #31
 8000484:	fa03 f000 	lsl.w	r0, r3, r0
 8000488:	4b01      	ldr	r3, [pc, #4]	; (8000490 <HAL_NVIC_EnableIRQ+0x14>)
 800048a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800048e:	4770      	bx	lr
 8000490:	e000e100 	.word	0xe000e100

08000494 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000494:	3801      	subs	r0, #1
 8000496:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800049a:	d20a      	bcs.n	80004b2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800049c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a0:	4a06      	ldr	r2, [pc, #24]	; (80004bc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004a2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004a8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004aa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004ac:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004b2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	e000e010 	.word	0xe000e010
 80004bc:	e000ed00 	.word	0xe000ed00

080004c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80004c4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80004c6:	4616      	mov	r6, r2
 80004c8:	4b65      	ldr	r3, [pc, #404]	; (8000660 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004ca:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000670 <HAL_GPIO_Init+0x1b0>
 80004ce:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000674 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80004d2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004d6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80004d8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004dc:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80004e0:	45a0      	cmp	r8, r4
 80004e2:	d17f      	bne.n	80005e4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80004e4:	684d      	ldr	r5, [r1, #4]
 80004e6:	2d12      	cmp	r5, #18
 80004e8:	f000 80af 	beq.w	800064a <HAL_GPIO_Init+0x18a>
 80004ec:	f200 8088 	bhi.w	8000600 <HAL_GPIO_Init+0x140>
 80004f0:	2d02      	cmp	r5, #2
 80004f2:	f000 80a7 	beq.w	8000644 <HAL_GPIO_Init+0x184>
 80004f6:	d87c      	bhi.n	80005f2 <HAL_GPIO_Init+0x132>
 80004f8:	2d00      	cmp	r5, #0
 80004fa:	f000 808e 	beq.w	800061a <HAL_GPIO_Init+0x15a>
 80004fe:	2d01      	cmp	r5, #1
 8000500:	f000 809e 	beq.w	8000640 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000504:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000508:	2cff      	cmp	r4, #255	; 0xff
 800050a:	bf93      	iteet	ls
 800050c:	4682      	movls	sl, r0
 800050e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000512:	3d08      	subhi	r5, #8
 8000514:	f8d0 b000 	ldrls.w	fp, [r0]
 8000518:	bf92      	itee	ls
 800051a:	00b5      	lslls	r5, r6, #2
 800051c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000520:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000522:	fa09 f805 	lsl.w	r8, r9, r5
 8000526:	ea2b 0808 	bic.w	r8, fp, r8
 800052a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800052e:	bf88      	it	hi
 8000530:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000534:	ea48 0505 	orr.w	r5, r8, r5
 8000538:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800053c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000540:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000544:	d04e      	beq.n	80005e4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000546:	4d47      	ldr	r5, [pc, #284]	; (8000664 <HAL_GPIO_Init+0x1a4>)
 8000548:	4f46      	ldr	r7, [pc, #280]	; (8000664 <HAL_GPIO_Init+0x1a4>)
 800054a:	69ad      	ldr	r5, [r5, #24]
 800054c:	f026 0803 	bic.w	r8, r6, #3
 8000550:	f045 0501 	orr.w	r5, r5, #1
 8000554:	61bd      	str	r5, [r7, #24]
 8000556:	69bd      	ldr	r5, [r7, #24]
 8000558:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800055c:	f005 0501 	and.w	r5, r5, #1
 8000560:	9501      	str	r5, [sp, #4]
 8000562:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000566:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800056a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800056c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000570:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000574:	fa09 f90b 	lsl.w	r9, r9, fp
 8000578:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800057c:	4d3a      	ldr	r5, [pc, #232]	; (8000668 <HAL_GPIO_Init+0x1a8>)
 800057e:	42a8      	cmp	r0, r5
 8000580:	d068      	beq.n	8000654 <HAL_GPIO_Init+0x194>
 8000582:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000586:	42a8      	cmp	r0, r5
 8000588:	d066      	beq.n	8000658 <HAL_GPIO_Init+0x198>
 800058a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800058e:	42a8      	cmp	r0, r5
 8000590:	d064      	beq.n	800065c <HAL_GPIO_Init+0x19c>
 8000592:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000596:	42a8      	cmp	r0, r5
 8000598:	bf0c      	ite	eq
 800059a:	2503      	moveq	r5, #3
 800059c:	2504      	movne	r5, #4
 800059e:	fa05 f50b 	lsl.w	r5, r5, fp
 80005a2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80005a6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005aa:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005ac:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80005b0:	bf14      	ite	ne
 80005b2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005b4:	43a5      	biceq	r5, r4
 80005b6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80005b8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005ba:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80005be:	bf14      	ite	ne
 80005c0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80005c2:	43a5      	biceq	r5, r4
 80005c4:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80005c6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005c8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80005cc:	bf14      	ite	ne
 80005ce:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80005d0:	43a5      	biceq	r5, r4
 80005d2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80005d4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005d6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80005da:	bf14      	ite	ne
 80005dc:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80005de:	ea25 0404 	biceq.w	r4, r5, r4
 80005e2:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80005e4:	3601      	adds	r6, #1
 80005e6:	2e10      	cmp	r6, #16
 80005e8:	f47f af73 	bne.w	80004d2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80005ec:	b003      	add	sp, #12
 80005ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80005f2:	2d03      	cmp	r5, #3
 80005f4:	d022      	beq.n	800063c <HAL_GPIO_Init+0x17c>
 80005f6:	2d11      	cmp	r5, #17
 80005f8:	d184      	bne.n	8000504 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80005fa:	68ca      	ldr	r2, [r1, #12]
 80005fc:	3204      	adds	r2, #4
          break;
 80005fe:	e781      	b.n	8000504 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000600:	4f1a      	ldr	r7, [pc, #104]	; (800066c <HAL_GPIO_Init+0x1ac>)
 8000602:	42bd      	cmp	r5, r7
 8000604:	d009      	beq.n	800061a <HAL_GPIO_Init+0x15a>
 8000606:	d812      	bhi.n	800062e <HAL_GPIO_Init+0x16e>
 8000608:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000678 <HAL_GPIO_Init+0x1b8>
 800060c:	454d      	cmp	r5, r9
 800060e:	d004      	beq.n	800061a <HAL_GPIO_Init+0x15a>
 8000610:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000614:	454d      	cmp	r5, r9
 8000616:	f47f af75 	bne.w	8000504 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800061a:	688a      	ldr	r2, [r1, #8]
 800061c:	b1c2      	cbz	r2, 8000650 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800061e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000620:	bf0c      	ite	eq
 8000622:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000626:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800062a:	2208      	movs	r2, #8
 800062c:	e76a      	b.n	8000504 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800062e:	4575      	cmp	r5, lr
 8000630:	d0f3      	beq.n	800061a <HAL_GPIO_Init+0x15a>
 8000632:	4565      	cmp	r5, ip
 8000634:	d0f1      	beq.n	800061a <HAL_GPIO_Init+0x15a>
 8000636:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800067c <HAL_GPIO_Init+0x1bc>
 800063a:	e7eb      	b.n	8000614 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800063c:	2200      	movs	r2, #0
 800063e:	e761      	b.n	8000504 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000640:	68ca      	ldr	r2, [r1, #12]
          break;
 8000642:	e75f      	b.n	8000504 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000644:	68ca      	ldr	r2, [r1, #12]
 8000646:	3208      	adds	r2, #8
          break;
 8000648:	e75c      	b.n	8000504 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800064a:	68ca      	ldr	r2, [r1, #12]
 800064c:	320c      	adds	r2, #12
          break;
 800064e:	e759      	b.n	8000504 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000650:	2204      	movs	r2, #4
 8000652:	e757      	b.n	8000504 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000654:	2500      	movs	r5, #0
 8000656:	e7a2      	b.n	800059e <HAL_GPIO_Init+0xde>
 8000658:	2501      	movs	r5, #1
 800065a:	e7a0      	b.n	800059e <HAL_GPIO_Init+0xde>
 800065c:	2502      	movs	r5, #2
 800065e:	e79e      	b.n	800059e <HAL_GPIO_Init+0xde>
 8000660:	40010400 	.word	0x40010400
 8000664:	40021000 	.word	0x40021000
 8000668:	40010800 	.word	0x40010800
 800066c:	10210000 	.word	0x10210000
 8000670:	10310000 	.word	0x10310000
 8000674:	10320000 	.word	0x10320000
 8000678:	10110000 	.word	0x10110000
 800067c:	10220000 	.word	0x10220000

08000680 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000680:	b10a      	cbz	r2, 8000686 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000682:	6101      	str	r1, [r0, #16]
 8000684:	4770      	bx	lr
 8000686:	0409      	lsls	r1, r1, #16
 8000688:	e7fb      	b.n	8000682 <HAL_GPIO_WritePin+0x2>

0800068a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800068a:	68c3      	ldr	r3, [r0, #12]
 800068c:	4059      	eors	r1, r3
 800068e:	60c1      	str	r1, [r0, #12]
 8000690:	4770      	bx	lr

08000692 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000696:	4604      	mov	r4, r0
{
 8000698:	b086      	sub	sp, #24
  if(hpcd == NULL)
 800069a:	2800      	cmp	r0, #0
 800069c:	d060      	beq.n	8000760 <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 800069e:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 80006a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80006a6:	b91b      	cbnz	r3, 80006b0 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80006a8:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80006ac:	f001 fef8 	bl	80024a0 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80006b0:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80006b2:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80006b4:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 80006b6:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80006ba:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 80006be:	f000 fecd 	bl	800145c <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80006c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80006c6:	682b      	ldr	r3, [r5, #0]
 80006c8:	f104 0804 	add.w	r8, r4, #4
 80006cc:	6033      	str	r3, [r6, #0]
 80006ce:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80006d2:	6820      	ldr	r0, [r4, #0]
 80006d4:	f000 feb2 	bl	800143c <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80006d8:	2100      	movs	r1, #0
 80006da:	6820      	ldr	r0, [r4, #0]
 80006dc:	f000 fec8 	bl	8001470 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 80006e0:	2100      	movs	r1, #0
 80006e2:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80006e4:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 80006e6:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80006e8:	4608      	mov	r0, r1
 80006ea:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 80006ee:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 80006f2:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 80006f4:	3101      	adds	r1, #1
 80006f6:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 80006f8:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80006fc:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8000700:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 8000702:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 8000704:	6410      	str	r0, [r2, #64]	; 0x40
 8000706:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 800070a:	d1f0      	bne.n	80006ee <HAL_PCD_Init+0x5c>
 800070c:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 800070e:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000710:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000714:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000716:	3201      	adds	r2, #1
 8000718:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 800071a:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 800071e:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8000722:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8000726:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 800072a:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 800072e:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 8000732:	d1ed      	bne.n	8000710 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000734:	466e      	mov	r6, sp
 8000736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000738:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800073a:	682b      	ldr	r3, [r5, #0]
 800073c:	6033      	str	r3, [r6, #0]
 800073e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000742:	6820      	ldr	r0, [r4, #0]
 8000744:	f000 fe96 	bl	8001474 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 8000748:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800074a:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 800074e:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 8000750:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 8000754:	f001 f966 	bl	8001a24 <USB_DevDisconnect>
  return HAL_OK;
 8000758:	2000      	movs	r0, #0
}
 800075a:	b006      	add	sp, #24
 800075c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000760:	2001      	movs	r0, #1
 8000762:	e7fa      	b.n	800075a <HAL_PCD_Init+0xc8>

08000764 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000764:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000768:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800076a:	2b01      	cmp	r3, #1
{
 800076c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800076e:	d00e      	beq.n	800078e <HAL_PCD_Start+0x2a>
 8000770:	2101      	movs	r1, #1
 8000772:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8000776:	f001 ffa6 	bl	80026c6 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 800077a:	6820      	ldr	r0, [r4, #0]
 800077c:	f001 f950 	bl	8001a20 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000780:	6820      	ldr	r0, [r4, #0]
 8000782:	f000 fe62 	bl	800144a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000786:	2000      	movs	r0, #0
 8000788:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 800078c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800078e:	2002      	movs	r0, #2
}
 8000790:	bd10      	pop	{r4, pc}

08000792 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000792:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 8000796:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000798:	2a01      	cmp	r2, #1
{
 800079a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800079c:	d00b      	beq.n	80007b6 <HAL_PCD_SetAddress+0x24>
 800079e:	2201      	movs	r2, #1
 80007a0:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 80007a4:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80007a8:	6800      	ldr	r0, [r0, #0]
 80007aa:	f001 f933 	bl	8001a14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 80007b4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80007b6:	2002      	movs	r0, #2
  return HAL_OK;
}
 80007b8:	bd10      	pop	{r4, pc}

080007ba <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80007ba:	b538      	push	{r3, r4, r5, lr}
 80007bc:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80007be:	b248      	sxtb	r0, r1
 80007c0:	2800      	cmp	r0, #0
 80007c2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80007c6:	bfb5      	itete	lt
 80007c8:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80007cc:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80007d0:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80007d2:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80007d6:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 80007d8:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 80007da:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 80007dc:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 80007de:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 80007e2:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d009      	beq.n	80007fc <HAL_PCD_EP_Open+0x42>
 80007e8:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80007ea:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80007ec:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80007f0:	f000 fe5c 	bl	80014ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80007f4:	2000      	movs	r0, #0
 80007f6:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 80007fa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80007fc:	2002      	movs	r0, #2
}
 80007fe:	bd38      	pop	{r3, r4, r5, pc}

08000800 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000800:	b24b      	sxtb	r3, r1
 8000802:	2b00      	cmp	r3, #0
 8000804:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000808:	bfb5      	itete	lt
 800080a:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800080e:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000812:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000814:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000818:	0fdb      	lsrs	r3, r3, #31
{  
 800081a:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 800081c:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 800081e:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000820:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 8000824:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000826:	2b01      	cmp	r3, #1
 8000828:	d009      	beq.n	800083e <HAL_PCD_EP_Close+0x3e>
 800082a:	2301      	movs	r3, #1
 800082c:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000830:	6800      	ldr	r0, [r0, #0]
 8000832:	f000 ffad 	bl	8001790 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000836:	2000      	movs	r0, #0
 8000838:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 800083c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800083e:	2002      	movs	r0, #2
}
 8000840:	bd10      	pop	{r4, pc}

08000842 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000842:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000844:	2600      	movs	r6, #0
 8000846:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800084a:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 800084c:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 800084e:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000852:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000856:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000858:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 800085c:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8000860:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 8000864:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 8000868:	6800      	ldr	r0, [r0, #0]
 800086a:	f001 f8f5 	bl	8001a58 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 800086e:	4630      	mov	r0, r6
 8000870:	bd70      	pop	{r4, r5, r6, pc}

08000872 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000872:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000876:	b570      	push	{r4, r5, r6, lr}
 8000878:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800087a:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 800087c:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 800087e:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000880:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 8000882:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000886:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800088a:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 800088c:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 800088e:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000890:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 8000894:	6800      	ldr	r0, [r0, #0]
 8000896:	f001 f8df 	bl	8001a58 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 800089a:	4630      	mov	r0, r6
 800089c:	bd70      	pop	{r4, r5, r6, pc}
	...

080008a0 <HAL_PCD_IRQHandler>:
{ 
 80008a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80008a4:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80008a6:	6800      	ldr	r0, [r0, #0]
 80008a8:	f001 f8be 	bl	8001a28 <USB_ReadInterrupts>
 80008ac:	0400      	lsls	r0, r0, #16
 80008ae:	f100 8098 	bmi.w	80009e2 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80008b2:	6820      	ldr	r0, [r4, #0]
 80008b4:	f001 f8b8 	bl	8001a28 <USB_ReadInterrupts>
 80008b8:	0541      	lsls	r1, r0, #21
 80008ba:	d50f      	bpl.n	80008dc <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80008bc:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80008be:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80008c0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80008c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80008c8:	041b      	lsls	r3, r3, #16
 80008ca:	0c1b      	lsrs	r3, r3, #16
 80008cc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80008d0:	f001 fe1d 	bl	800250e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 80008d4:	2100      	movs	r1, #0
 80008d6:	4620      	mov	r0, r4
 80008d8:	f7ff ff5b 	bl	8000792 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 80008dc:	6820      	ldr	r0, [r4, #0]
 80008de:	f001 f8a3 	bl	8001a28 <USB_ReadInterrupts>
 80008e2:	0447      	lsls	r7, r0, #17
 80008e4:	d508      	bpl.n	80008f8 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 80008e6:	6822      	ldr	r2, [r4, #0]
 80008e8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80008ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008f0:	041b      	lsls	r3, r3, #16
 80008f2:	0c1b      	lsrs	r3, r3, #16
 80008f4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 80008f8:	6820      	ldr	r0, [r4, #0]
 80008fa:	f001 f895 	bl	8001a28 <USB_ReadInterrupts>
 80008fe:	0486      	lsls	r6, r0, #18
 8000900:	d508      	bpl.n	8000914 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000902:	6822      	ldr	r2, [r4, #0]
 8000904:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000908:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800090c:	041b      	lsls	r3, r3, #16
 800090e:	0c1b      	lsrs	r3, r3, #16
 8000910:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000914:	6820      	ldr	r0, [r4, #0]
 8000916:	f001 f887 	bl	8001a28 <USB_ReadInterrupts>
 800091a:	04c5      	lsls	r5, r0, #19
 800091c:	d51c      	bpl.n	8000958 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 800091e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000920:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000922:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000926:	f023 0304 	bic.w	r3, r3, #4
 800092a:	041b      	lsls	r3, r3, #16
 800092c:	0c1b      	lsrs	r3, r3, #16
 800092e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000932:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000936:	f023 0308 	bic.w	r3, r3, #8
 800093a:	041b      	lsls	r3, r3, #16
 800093c:	0c1b      	lsrs	r3, r3, #16
 800093e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000942:	f001 fe01 	bl	8002548 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000946:	6822      	ldr	r2, [r4, #0]
 8000948:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800094c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000950:	041b      	lsls	r3, r3, #16
 8000952:	0c1b      	lsrs	r3, r3, #16
 8000954:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000958:	6820      	ldr	r0, [r4, #0]
 800095a:	f001 f865 	bl	8001a28 <USB_ReadInterrupts>
 800095e:	0500      	lsls	r0, r0, #20
 8000960:	d51d      	bpl.n	800099e <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000962:	6820      	ldr	r0, [r4, #0]
 8000964:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000968:	b29b      	uxth	r3, r3
 800096a:	f043 0308 	orr.w	r3, r3, #8
 800096e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000972:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000976:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800097a:	041b      	lsls	r3, r3, #16
 800097c:	0c1b      	lsrs	r3, r3, #16
 800097e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000982:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000986:	b29b      	uxth	r3, r3
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8000990:	f001 f84a 	bl	8001a28 <USB_ReadInterrupts>
 8000994:	04c1      	lsls	r1, r0, #19
 8000996:	d402      	bmi.n	800099e <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 8000998:	4620      	mov	r0, r4
 800099a:	f001 fdc5 	bl	8002528 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 800099e:	6820      	ldr	r0, [r4, #0]
 80009a0:	f001 f842 	bl	8001a28 <USB_ReadInterrupts>
 80009a4:	0582      	lsls	r2, r0, #22
 80009a6:	d50b      	bpl.n	80009c0 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80009a8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80009aa:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80009ac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80009b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80009b4:	041b      	lsls	r3, r3, #16
 80009b6:	0c1b      	lsrs	r3, r3, #16
 80009b8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80009bc:	f001 fda3 	bl	8002506 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80009c0:	6820      	ldr	r0, [r4, #0]
 80009c2:	f001 f831 	bl	8001a28 <USB_ReadInterrupts>
 80009c6:	05c3      	lsls	r3, r0, #23
 80009c8:	d508      	bpl.n	80009dc <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80009ca:	6822      	ldr	r2, [r4, #0]
 80009cc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80009d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009d4:	041b      	lsls	r3, r3, #16
 80009d6:	0c1b      	lsrs	r3, r3, #16
 80009d8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80009dc:	b002      	add	sp, #8
 80009de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 80009e2:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80009e4:	4fc8      	ldr	r7, [pc, #800]	; (8000d08 <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80009e6:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8000d0c <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80009ea:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8000d10 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 80009ee:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 80009f2:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80009f6:	6820      	ldr	r0, [r4, #0]
 80009f8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000a02:	041b      	lsls	r3, r3, #16
 8000a04:	f57f af55 	bpl.w	80008b2 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000a08:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8000a0c:	f015 050f 	ands.w	r5, r5, #15
 8000a10:	f040 80ab 	bne.w	8000b6a <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000a14:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a18:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000a1a:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a1e:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000a20:	d126      	bne.n	8000a70 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a22:	403b      	ands	r3, r7
 8000a24:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a26:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a2a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a34:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000a38:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000a3c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a42:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000a44:	4413      	add	r3, r2
 8000a46:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000a48:	4620      	mov	r0, r4
 8000a4a:	f001 fd55 	bl	80024f8 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000a4e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d0cf      	beq.n	80009f6 <HAL_PCD_IRQHandler+0x156>
 8000a56:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a58:	2a00      	cmp	r2, #0
 8000a5a:	d1cc      	bne.n	80009f6 <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000a5c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000a60:	6821      	ldr	r1, [r4, #0]
 8000a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a66:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000a6a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000a6e:	e7c2      	b.n	80009f6 <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000a70:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000a74:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000a78:	051a      	lsls	r2, r3, #20
 8000a7a:	d51f      	bpl.n	8000abc <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000a7c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a80:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a8a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a8e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000a92:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000a96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a9a:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000a9e:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000aa2:	f001 f8d9 	bl	8001c58 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000aa6:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000aa8:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000aaa:	8813      	ldrh	r3, [r2, #0]
 8000aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ab0:	051b      	lsls	r3, r3, #20
 8000ab2:	0d1b      	lsrs	r3, r3, #20
 8000ab4:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000ab6:	f001 fd11 	bl	80024dc <HAL_PCD_SetupStageCallback>
 8000aba:	e79c      	b.n	80009f6 <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000abc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000ac0:	041b      	lsls	r3, r3, #16
 8000ac2:	d598      	bpl.n	80009f6 <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ac4:	8803      	ldrh	r3, [r0, #0]
 8000ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000aca:	051b      	lsls	r3, r3, #20
 8000acc:	0d1b      	lsrs	r3, r3, #20
 8000ace:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ad0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ad4:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000ade:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ae2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000ae6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000aea:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8000aee:	b163      	cbz	r3, 8000b0a <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000af0:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8000af4:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8000af8:	f001 f8ae 	bl	8001c58 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000afc:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8000b00:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8000b04:	4413      	add	r3, r2
 8000b06:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4620      	mov	r0, r4
 8000b0e:	f001 fceb 	bl	80024e8 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000b12:	6822      	ldr	r2, [r4, #0]
 8000b14:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 8000b18:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000b1c:	2d3e      	cmp	r5, #62	; 0x3e
 8000b1e:	b289      	uxth	r1, r1
 8000b20:	f101 0106 	add.w	r1, r1, #6
 8000b24:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8000b28:	d917      	bls.n	8000b5a <HAL_PCD_IRQHandler+0x2ba>
 8000b2a:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8000b2e:	06ee      	lsls	r6, r5, #27
 8000b30:	bf04      	itt	eq
 8000b32:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000b36:	b29b      	uxtheq	r3, r3
 8000b38:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000b42:	8813      	ldrh	r3, [r2, #0]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	ea03 0308 	and.w	r3, r3, r8
 8000b4a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b56:	8013      	strh	r3, [r2, #0]
 8000b58:	e74d      	b.n	80009f6 <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000b5a:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000b5e:	07ed      	lsls	r5, r5, #31
 8000b60:	bf44      	itt	mi
 8000b62:	3301      	addmi	r3, #1
 8000b64:	b29b      	uxthmi	r3, r3
 8000b66:	029b      	lsls	r3, r3, #10
 8000b68:	e7e8      	b.n	8000b3c <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000b6a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000b74:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000b78:	0419      	lsls	r1, r3, #16
 8000b7a:	d53f      	bpl.n	8000bfc <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000b7c:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000b80:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b88:	051b      	lsls	r3, r3, #20
 8000b8a:	0d1b      	lsrs	r3, r3, #20
 8000b8c:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000b90:	eb04 010a 	add.w	r1, r4, sl
 8000b94:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d174      	bne.n	8000c86 <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000b9c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ba0:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	3306      	adds	r3, #6
 8000ba8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000bac:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000bb0:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000bb4:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8000bb8:	b136      	cbz	r6, 8000bc8 <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000bba:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8000bbe:	4633      	mov	r3, r6
 8000bc0:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000bc4:	f001 f848 	bl	8001c58 <USB_ReadPMA>
 8000bc8:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 8000bcc:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8000bd0:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8000bd4:	4433      	add	r3, r6
 8000bd6:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000bda:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8000bde:	4432      	add	r2, r6
 8000be0:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000be4:	b123      	cbz	r3, 8000bf0 <HAL_PCD_IRQHandler+0x350>
 8000be6:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8000bea:	4286      	cmp	r6, r0
 8000bec:	f080 8086 	bcs.w	8000cfc <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000bf0:	44a2      	add	sl, r4
 8000bf2:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	f001 fc76 	bl	80024e8 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000bfc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000c00:	061a      	lsls	r2, r3, #24
 8000c02:	f57f aef8 	bpl.w	80009f6 <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000c06:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000c08:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000c0a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000c0e:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	403b      	ands	r3, r7
 8000c14:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000c18:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000c1c:	3502      	adds	r5, #2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d178      	bne.n	8000d14 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000c22:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000c26:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	3302      	adds	r3, #2
 8000c2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000c32:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000c36:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000c3a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000c3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c42:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8000c44:	b11b      	cbz	r3, 8000c4e <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000c46:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000c48:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000c4a:	f000 fef3 	bl	8001a34 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000c4e:	6822      	ldr	r2, [r4, #0]
 8000c50:	4426      	add	r6, r4
 8000c52:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000c56:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000c62:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000c66:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8000c6a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000c6c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000c70:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000c72:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000c74:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8000c76:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000c78:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f040 8085 	bne.w	8000d8a <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000c80:	f001 fc3a 	bl	80024f8 <HAL_PCD_DataInStageCallback>
 8000c84:	e6b7      	b.n	80009f6 <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000c86:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8000c8a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000c94:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000c98:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000c9a:	d021      	beq.n	8000ce0 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000c9c:	3202      	adds	r2, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ca4:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000ca8:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000cac:	b136      	cbz	r6, 8000cbc <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000cae:	4633      	mov	r3, r6
 8000cb0:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000cb4:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000cb8:	f000 ffce 	bl	8001c58 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000cbc:	eb04 030a 	add.w	r3, r4, sl
 8000cc0:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000cc4:	6822      	ldr	r2, [r4, #0]
 8000cc6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000cce:	051b      	lsls	r3, r3, #20
 8000cd0:	0d1b      	lsrs	r3, r3, #20
 8000cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000cda:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000cde:	e773      	b.n	8000bc8 <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000ce0:	3206      	adds	r2, #6
 8000ce2:	4413      	add	r3, r2
 8000ce4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ce8:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000cec:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e3      	beq.n	8000cbc <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000cf4:	4633      	mov	r3, r6
 8000cf6:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000cfa:	e7db      	b.n	8000cb4 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000cfc:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000d00:	4620      	mov	r0, r4
 8000d02:	f7ff fd9e 	bl	8000842 <HAL_PCD_EP_Receive>
 8000d06:	e779      	b.n	8000bfc <HAL_PCD_IRQHandler+0x35c>
 8000d08:	ffff8f0f 	.word	0xffff8f0f
 8000d0c:	ffffbf8f 	.word	0xffffbf8f
 8000d10:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000d14:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000d18:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000d22:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000d26:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000d28:	d020      	beq.n	8000d6c <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000d2a:	3202      	adds	r2, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d32:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000d36:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d3e:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000d40:	b11b      	cbz	r3, 8000d4a <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000d42:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000d44:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000d46:	f000 fe75 	bl	8001a34 <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000d4a:	19a3      	adds	r3, r4, r6
 8000d4c:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000d50:	6822      	ldr	r2, [r4, #0]
 8000d52:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d5a:	051b      	lsls	r3, r3, #20
 8000d5c:	0d1b      	lsrs	r3, r3, #20
 8000d5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d66:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000d6a:	e770      	b.n	8000c4e <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000d6c:	3206      	adds	r2, #6
 8000d6e:	4413      	add	r3, r2
 8000d70:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d74:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000d78:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d80:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0e1      	beq.n	8000d4a <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000d86:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000d88:	e7dc      	b.n	8000d44 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000d8a:	f7ff fd72 	bl	8000872 <HAL_PCD_EP_Transmit>
 8000d8e:	e632      	b.n	80009f6 <HAL_PCD_IRQHandler+0x156>

08000d90 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8000d90:	2201      	movs	r2, #1
{
 8000d92:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000d94:	b24b      	sxtb	r3, r1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000d9c:	bfb5      	itete	lt
 8000d9e:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000da2:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000da6:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000da8:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000dac:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 8000dae:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8000db0:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000db2:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000db4:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8000db6:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000dba:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d00e      	beq.n	8000dde <HAL_PCD_EP_SetStall+0x4e>
 8000dc0:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000dc4:	6800      	ldr	r0, [r0, #0]
 8000dc6:	f000 fdb1 	bl	800192c <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000dca:	b925      	cbnz	r5, 8000dd6 <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000dcc:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000dd0:	6820      	ldr	r0, [r4, #0]
 8000dd2:	f000 fe2d 	bl	8001a30 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000ddc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000dde:	2002      	movs	r0, #2
}
 8000de0:	bd38      	pop	{r3, r4, r5, pc}

08000de2 <HAL_PCD_EP_ClrStall>:
{
 8000de2:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8000de4:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 8000de6:	b24b      	sxtb	r3, r1
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000dee:	bfb5      	itete	lt
 8000df0:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000df4:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000df8:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000dfa:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000dfe:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8000e00:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000e02:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000e04:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000e06:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000e0a:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d009      	beq.n	8000e24 <HAL_PCD_EP_ClrStall+0x42>
 8000e10:	2301      	movs	r3, #1
 8000e12:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000e16:	6800      	ldr	r0, [r0, #0]
 8000e18:	f000 fdba 	bl	8001990 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000e1c:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8000e20:	4620      	mov	r0, r4
 8000e22:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8000e24:	2002      	movs	r0, #2
}
 8000e26:	bd38      	pop	{r3, r4, r5, pc}

08000e28 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8000e28:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e2c:	bf1b      	ittet	ne
 8000e2e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8000e32:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e36:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e3a:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000e3c:	bf08      	it	eq
 8000e3e:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000e42:	b91a      	cbnz	r2, 8000e4c <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8000e44:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8000e46:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8000e48:	2000      	movs	r0, #0
 8000e4a:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8000e4c:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8000e4e:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000e50:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000e52:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000e54:	8103      	strh	r3, [r0, #8]
 8000e56:	e7f7      	b.n	8000e48 <HAL_PCDEx_PMAConfig+0x20>

08000e58 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e58:	6803      	ldr	r3, [r0, #0]
{
 8000e5a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e5e:	07db      	lsls	r3, r3, #31
{
 8000e60:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e62:	d410      	bmi.n	8000e86 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e64:	682b      	ldr	r3, [r5, #0]
 8000e66:	079f      	lsls	r7, r3, #30
 8000e68:	d45e      	bmi.n	8000f28 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e6a:	682b      	ldr	r3, [r5, #0]
 8000e6c:	0719      	lsls	r1, r3, #28
 8000e6e:	f100 8095 	bmi.w	8000f9c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e72:	682b      	ldr	r3, [r5, #0]
 8000e74:	075a      	lsls	r2, r3, #29
 8000e76:	f100 80bf 	bmi.w	8000ff8 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e7a:	69ea      	ldr	r2, [r5, #28]
 8000e7c:	2a00      	cmp	r2, #0
 8000e7e:	f040 812d 	bne.w	80010dc <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000e82:	2000      	movs	r0, #0
 8000e84:	e014      	b.n	8000eb0 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e86:	4c90      	ldr	r4, [pc, #576]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000e88:	6863      	ldr	r3, [r4, #4]
 8000e8a:	f003 030c 	and.w	r3, r3, #12
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d007      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e92:	6863      	ldr	r3, [r4, #4]
 8000e94:	f003 030c 	and.w	r3, r3, #12
 8000e98:	2b08      	cmp	r3, #8
 8000e9a:	d10c      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x5e>
 8000e9c:	6863      	ldr	r3, [r4, #4]
 8000e9e:	03de      	lsls	r6, r3, #15
 8000ea0:	d509      	bpl.n	8000eb6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea2:	6823      	ldr	r3, [r4, #0]
 8000ea4:	039c      	lsls	r4, r3, #14
 8000ea6:	d5dd      	bpl.n	8000e64 <HAL_RCC_OscConfig+0xc>
 8000ea8:	686b      	ldr	r3, [r5, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1da      	bne.n	8000e64 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000eae:	2001      	movs	r0, #1
}
 8000eb0:	b002      	add	sp, #8
 8000eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb6:	686b      	ldr	r3, [r5, #4]
 8000eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ebc:	d110      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x88>
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ec6:	f7ff fa7b 	bl	80003c0 <HAL_GetTick>
 8000eca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ecc:	6823      	ldr	r3, [r4, #0]
 8000ece:	0398      	lsls	r0, r3, #14
 8000ed0:	d4c8      	bmi.n	8000e64 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ed2:	f7ff fa75 	bl	80003c0 <HAL_GetTick>
 8000ed6:	1b80      	subs	r0, r0, r6
 8000ed8:	2864      	cmp	r0, #100	; 0x64
 8000eda:	d9f7      	bls.n	8000ecc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000edc:	2003      	movs	r0, #3
 8000ede:	e7e7      	b.n	8000eb0 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee0:	b99b      	cbnz	r3, 8000f0a <HAL_RCC_OscConfig+0xb2>
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee8:	6023      	str	r3, [r4, #0]
 8000eea:	6823      	ldr	r3, [r4, #0]
 8000eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ef2:	f7ff fa65 	bl	80003c0 <HAL_GetTick>
 8000ef6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ef8:	6823      	ldr	r3, [r4, #0]
 8000efa:	0399      	lsls	r1, r3, #14
 8000efc:	d5b2      	bpl.n	8000e64 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000efe:	f7ff fa5f 	bl	80003c0 <HAL_GetTick>
 8000f02:	1b80      	subs	r0, r0, r6
 8000f04:	2864      	cmp	r0, #100	; 0x64
 8000f06:	d9f7      	bls.n	8000ef8 <HAL_RCC_OscConfig+0xa0>
 8000f08:	e7e8      	b.n	8000edc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f0e:	6823      	ldr	r3, [r4, #0]
 8000f10:	d103      	bne.n	8000f1a <HAL_RCC_OscConfig+0xc2>
 8000f12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f16:	6023      	str	r3, [r4, #0]
 8000f18:	e7d1      	b.n	8000ebe <HAL_RCC_OscConfig+0x66>
 8000f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1e:	6023      	str	r3, [r4, #0]
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f26:	e7cd      	b.n	8000ec4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f28:	4c67      	ldr	r4, [pc, #412]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f2a:	6863      	ldr	r3, [r4, #4]
 8000f2c:	f013 0f0c 	tst.w	r3, #12
 8000f30:	d007      	beq.n	8000f42 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f32:	6863      	ldr	r3, [r4, #4]
 8000f34:	f003 030c 	and.w	r3, r3, #12
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	d110      	bne.n	8000f5e <HAL_RCC_OscConfig+0x106>
 8000f3c:	6863      	ldr	r3, [r4, #4]
 8000f3e:	03da      	lsls	r2, r3, #15
 8000f40:	d40d      	bmi.n	8000f5e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	079b      	lsls	r3, r3, #30
 8000f46:	d502      	bpl.n	8000f4e <HAL_RCC_OscConfig+0xf6>
 8000f48:	692b      	ldr	r3, [r5, #16]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d1af      	bne.n	8000eae <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	696a      	ldr	r2, [r5, #20]
 8000f52:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f56:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f5a:	6023      	str	r3, [r4, #0]
 8000f5c:	e785      	b.n	8000e6a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f5e:	692a      	ldr	r2, [r5, #16]
 8000f60:	4b5a      	ldr	r3, [pc, #360]	; (80010cc <HAL_RCC_OscConfig+0x274>)
 8000f62:	b16a      	cbz	r2, 8000f80 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000f64:	2201      	movs	r2, #1
 8000f66:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f68:	f7ff fa2a 	bl	80003c0 <HAL_GetTick>
 8000f6c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	079f      	lsls	r7, r3, #30
 8000f72:	d4ec      	bmi.n	8000f4e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f74:	f7ff fa24 	bl	80003c0 <HAL_GetTick>
 8000f78:	1b80      	subs	r0, r0, r6
 8000f7a:	2802      	cmp	r0, #2
 8000f7c:	d9f7      	bls.n	8000f6e <HAL_RCC_OscConfig+0x116>
 8000f7e:	e7ad      	b.n	8000edc <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000f80:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f82:	f7ff fa1d 	bl	80003c0 <HAL_GetTick>
 8000f86:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	0798      	lsls	r0, r3, #30
 8000f8c:	f57f af6d 	bpl.w	8000e6a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f90:	f7ff fa16 	bl	80003c0 <HAL_GetTick>
 8000f94:	1b80      	subs	r0, r0, r6
 8000f96:	2802      	cmp	r0, #2
 8000f98:	d9f6      	bls.n	8000f88 <HAL_RCC_OscConfig+0x130>
 8000f9a:	e79f      	b.n	8000edc <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f9c:	69aa      	ldr	r2, [r5, #24]
 8000f9e:	4c4a      	ldr	r4, [pc, #296]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000fa0:	4b4b      	ldr	r3, [pc, #300]	; (80010d0 <HAL_RCC_OscConfig+0x278>)
 8000fa2:	b1da      	cbz	r2, 8000fdc <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000fa8:	f7ff fa0a 	bl	80003c0 <HAL_GetTick>
 8000fac:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fb0:	079b      	lsls	r3, r3, #30
 8000fb2:	d50d      	bpl.n	8000fd0 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000fb4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000fb8:	4b46      	ldr	r3, [pc, #280]	; (80010d4 <HAL_RCC_OscConfig+0x27c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fc0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000fc2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000fc4:	9b01      	ldr	r3, [sp, #4]
 8000fc6:	1e5a      	subs	r2, r3, #1
 8000fc8:	9201      	str	r2, [sp, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f9      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x16a>
 8000fce:	e750      	b.n	8000e72 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fd0:	f7ff f9f6 	bl	80003c0 <HAL_GetTick>
 8000fd4:	1b80      	subs	r0, r0, r6
 8000fd6:	2802      	cmp	r0, #2
 8000fd8:	d9e9      	bls.n	8000fae <HAL_RCC_OscConfig+0x156>
 8000fda:	e77f      	b.n	8000edc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000fdc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000fde:	f7ff f9ef 	bl	80003c0 <HAL_GetTick>
 8000fe2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fe6:	079f      	lsls	r7, r3, #30
 8000fe8:	f57f af43 	bpl.w	8000e72 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fec:	f7ff f9e8 	bl	80003c0 <HAL_GetTick>
 8000ff0:	1b80      	subs	r0, r0, r6
 8000ff2:	2802      	cmp	r0, #2
 8000ff4:	d9f6      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x18c>
 8000ff6:	e771      	b.n	8000edc <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ff8:	4c33      	ldr	r4, [pc, #204]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ffa:	69e3      	ldr	r3, [r4, #28]
 8000ffc:	00d8      	lsls	r0, r3, #3
 8000ffe:	d424      	bmi.n	800104a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001000:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	69e3      	ldr	r3, [r4, #28]
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001008:	61e3      	str	r3, [r4, #28]
 800100a:	69e3      	ldr	r3, [r4, #28]
 800100c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001014:	4e30      	ldr	r6, [pc, #192]	; (80010d8 <HAL_RCC_OscConfig+0x280>)
 8001016:	6833      	ldr	r3, [r6, #0]
 8001018:	05d9      	lsls	r1, r3, #23
 800101a:	d518      	bpl.n	800104e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800101c:	68eb      	ldr	r3, [r5, #12]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d126      	bne.n	8001070 <HAL_RCC_OscConfig+0x218>
 8001022:	6a23      	ldr	r3, [r4, #32]
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800102a:	f7ff f9c9 	bl	80003c0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800102e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001032:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001034:	6a23      	ldr	r3, [r4, #32]
 8001036:	079b      	lsls	r3, r3, #30
 8001038:	d53f      	bpl.n	80010ba <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800103a:	2f00      	cmp	r7, #0
 800103c:	f43f af1d 	beq.w	8000e7a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001040:	69e3      	ldr	r3, [r4, #28]
 8001042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001046:	61e3      	str	r3, [r4, #28]
 8001048:	e717      	b.n	8000e7a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800104a:	2700      	movs	r7, #0
 800104c:	e7e2      	b.n	8001014 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800104e:	6833      	ldr	r3, [r6, #0]
 8001050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001054:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001056:	f7ff f9b3 	bl	80003c0 <HAL_GetTick>
 800105a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800105c:	6833      	ldr	r3, [r6, #0]
 800105e:	05da      	lsls	r2, r3, #23
 8001060:	d4dc      	bmi.n	800101c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001062:	f7ff f9ad 	bl	80003c0 <HAL_GetTick>
 8001066:	eba0 0008 	sub.w	r0, r0, r8
 800106a:	2864      	cmp	r0, #100	; 0x64
 800106c:	d9f6      	bls.n	800105c <HAL_RCC_OscConfig+0x204>
 800106e:	e735      	b.n	8000edc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001070:	b9ab      	cbnz	r3, 800109e <HAL_RCC_OscConfig+0x246>
 8001072:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001074:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001078:	f023 0301 	bic.w	r3, r3, #1
 800107c:	6223      	str	r3, [r4, #32]
 800107e:	6a23      	ldr	r3, [r4, #32]
 8001080:	f023 0304 	bic.w	r3, r3, #4
 8001084:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001086:	f7ff f99b 	bl	80003c0 <HAL_GetTick>
 800108a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800108c:	6a23      	ldr	r3, [r4, #32]
 800108e:	0798      	lsls	r0, r3, #30
 8001090:	d5d3      	bpl.n	800103a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001092:	f7ff f995 	bl	80003c0 <HAL_GetTick>
 8001096:	1b80      	subs	r0, r0, r6
 8001098:	4540      	cmp	r0, r8
 800109a:	d9f7      	bls.n	800108c <HAL_RCC_OscConfig+0x234>
 800109c:	e71e      	b.n	8000edc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800109e:	2b05      	cmp	r3, #5
 80010a0:	6a23      	ldr	r3, [r4, #32]
 80010a2:	d103      	bne.n	80010ac <HAL_RCC_OscConfig+0x254>
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	6223      	str	r3, [r4, #32]
 80010aa:	e7ba      	b.n	8001022 <HAL_RCC_OscConfig+0x1ca>
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	6223      	str	r3, [r4, #32]
 80010b2:	6a23      	ldr	r3, [r4, #32]
 80010b4:	f023 0304 	bic.w	r3, r3, #4
 80010b8:	e7b6      	b.n	8001028 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ba:	f7ff f981 	bl	80003c0 <HAL_GetTick>
 80010be:	eba0 0008 	sub.w	r0, r0, r8
 80010c2:	42b0      	cmp	r0, r6
 80010c4:	d9b6      	bls.n	8001034 <HAL_RCC_OscConfig+0x1dc>
 80010c6:	e709      	b.n	8000edc <HAL_RCC_OscConfig+0x84>
 80010c8:	40021000 	.word	0x40021000
 80010cc:	42420000 	.word	0x42420000
 80010d0:	42420480 	.word	0x42420480
 80010d4:	20000000 	.word	0x20000000
 80010d8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010dc:	4c22      	ldr	r4, [pc, #136]	; (8001168 <HAL_RCC_OscConfig+0x310>)
 80010de:	6863      	ldr	r3, [r4, #4]
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	f43f aee2 	beq.w	8000eae <HAL_RCC_OscConfig+0x56>
 80010ea:	2300      	movs	r3, #0
 80010ec:	4e1f      	ldr	r6, [pc, #124]	; (800116c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010ee:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80010f0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010f2:	d12b      	bne.n	800114c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80010f4:	f7ff f964 	bl	80003c0 <HAL_GetTick>
 80010f8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010fa:	6823      	ldr	r3, [r4, #0]
 80010fc:	0199      	lsls	r1, r3, #6
 80010fe:	d41f      	bmi.n	8001140 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001100:	6a2b      	ldr	r3, [r5, #32]
 8001102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001106:	d105      	bne.n	8001114 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001108:	6862      	ldr	r2, [r4, #4]
 800110a:	68a9      	ldr	r1, [r5, #8]
 800110c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001110:	430a      	orrs	r2, r1
 8001112:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001114:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001116:	6862      	ldr	r2, [r4, #4]
 8001118:	430b      	orrs	r3, r1
 800111a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800111e:	4313      	orrs	r3, r2
 8001120:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001122:	2301      	movs	r3, #1
 8001124:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001126:	f7ff f94b 	bl	80003c0 <HAL_GetTick>
 800112a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	019a      	lsls	r2, r3, #6
 8001130:	f53f aea7 	bmi.w	8000e82 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001134:	f7ff f944 	bl	80003c0 <HAL_GetTick>
 8001138:	1b40      	subs	r0, r0, r5
 800113a:	2802      	cmp	r0, #2
 800113c:	d9f6      	bls.n	800112c <HAL_RCC_OscConfig+0x2d4>
 800113e:	e6cd      	b.n	8000edc <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001140:	f7ff f93e 	bl	80003c0 <HAL_GetTick>
 8001144:	1bc0      	subs	r0, r0, r7
 8001146:	2802      	cmp	r0, #2
 8001148:	d9d7      	bls.n	80010fa <HAL_RCC_OscConfig+0x2a2>
 800114a:	e6c7      	b.n	8000edc <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800114c:	f7ff f938 	bl	80003c0 <HAL_GetTick>
 8001150:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001152:	6823      	ldr	r3, [r4, #0]
 8001154:	019b      	lsls	r3, r3, #6
 8001156:	f57f ae94 	bpl.w	8000e82 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800115a:	f7ff f931 	bl	80003c0 <HAL_GetTick>
 800115e:	1b40      	subs	r0, r0, r5
 8001160:	2802      	cmp	r0, #2
 8001162:	d9f6      	bls.n	8001152 <HAL_RCC_OscConfig+0x2fa>
 8001164:	e6ba      	b.n	8000edc <HAL_RCC_OscConfig+0x84>
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000
 800116c:	42420060 	.word	0x42420060

08001170 <HAL_RCC_GetSysClockFreq>:
{
 8001170:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001174:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001176:	ac02      	add	r4, sp, #8
 8001178:	f103 0510 	add.w	r5, r3, #16
 800117c:	4622      	mov	r2, r4
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	6859      	ldr	r1, [r3, #4]
 8001182:	3308      	adds	r3, #8
 8001184:	c203      	stmia	r2!, {r0, r1}
 8001186:	42ab      	cmp	r3, r5
 8001188:	4614      	mov	r4, r2
 800118a:	d1f7      	bne.n	800117c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800118c:	2301      	movs	r3, #1
 800118e:	f88d 3004 	strb.w	r3, [sp, #4]
 8001192:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001194:	4911      	ldr	r1, [pc, #68]	; (80011dc <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001196:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800119a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800119c:	f003 020c 	and.w	r2, r3, #12
 80011a0:	2a08      	cmp	r2, #8
 80011a2:	d117      	bne.n	80011d4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011a4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80011a8:	a806      	add	r0, sp, #24
 80011aa:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011ac:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011ae:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011b2:	d50c      	bpl.n	80011ce <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011b4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011b6:	480a      	ldr	r0, [pc, #40]	; (80011e0 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011b8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011bc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011be:	aa06      	add	r2, sp, #24
 80011c0:	4413      	add	r3, r2
 80011c2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011c6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80011ca:	b007      	add	sp, #28
 80011cc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <HAL_RCC_GetSysClockFreq+0x74>)
 80011d0:	4350      	muls	r0, r2
 80011d2:	e7fa      	b.n	80011ca <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80011d6:	e7f8      	b.n	80011ca <HAL_RCC_GetSysClockFreq+0x5a>
 80011d8:	08002784 	.word	0x08002784
 80011dc:	40021000 	.word	0x40021000
 80011e0:	007a1200 	.word	0x007a1200
 80011e4:	003d0900 	.word	0x003d0900

080011e8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011e8:	4a54      	ldr	r2, [pc, #336]	; (800133c <HAL_RCC_ClockConfig+0x154>)
{
 80011ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011ee:	6813      	ldr	r3, [r2, #0]
{
 80011f0:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	428b      	cmp	r3, r1
{
 80011f8:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011fa:	d32a      	bcc.n	8001252 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011fc:	6829      	ldr	r1, [r5, #0]
 80011fe:	078c      	lsls	r4, r1, #30
 8001200:	d434      	bmi.n	800126c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001202:	07ca      	lsls	r2, r1, #31
 8001204:	d447      	bmi.n	8001296 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001206:	4a4d      	ldr	r2, [pc, #308]	; (800133c <HAL_RCC_ClockConfig+0x154>)
 8001208:	6813      	ldr	r3, [r2, #0]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	429e      	cmp	r6, r3
 8001210:	f0c0 8082 	bcc.w	8001318 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001214:	682a      	ldr	r2, [r5, #0]
 8001216:	4c4a      	ldr	r4, [pc, #296]	; (8001340 <HAL_RCC_ClockConfig+0x158>)
 8001218:	f012 0f04 	tst.w	r2, #4
 800121c:	f040 8087 	bne.w	800132e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001220:	0713      	lsls	r3, r2, #28
 8001222:	d506      	bpl.n	8001232 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001224:	6863      	ldr	r3, [r4, #4]
 8001226:	692a      	ldr	r2, [r5, #16]
 8001228:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800122c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001230:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001232:	f7ff ff9d 	bl	8001170 <HAL_RCC_GetSysClockFreq>
 8001236:	6863      	ldr	r3, [r4, #4]
 8001238:	4a42      	ldr	r2, [pc, #264]	; (8001344 <HAL_RCC_ClockConfig+0x15c>)
 800123a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800123e:	5cd3      	ldrb	r3, [r2, r3]
 8001240:	40d8      	lsrs	r0, r3
 8001242:	4b41      	ldr	r3, [pc, #260]	; (8001348 <HAL_RCC_ClockConfig+0x160>)
 8001244:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff f878 	bl	800033c <HAL_InitTick>
  return HAL_OK;
 800124c:	2000      	movs	r0, #0
}
 800124e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001252:	6813      	ldr	r3, [r2, #0]
 8001254:	f023 0307 	bic.w	r3, r3, #7
 8001258:	430b      	orrs	r3, r1
 800125a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800125c:	6813      	ldr	r3, [r2, #0]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	4299      	cmp	r1, r3
 8001264:	d0ca      	beq.n	80011fc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001266:	2001      	movs	r0, #1
 8001268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800126c:	4b34      	ldr	r3, [pc, #208]	; (8001340 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800126e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001272:	bf1e      	ittt	ne
 8001274:	685a      	ldrne	r2, [r3, #4]
 8001276:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800127a:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800127c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800127e:	bf42      	ittt	mi
 8001280:	685a      	ldrmi	r2, [r3, #4]
 8001282:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001286:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	68a8      	ldr	r0, [r5, #8]
 800128c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001290:	4302      	orrs	r2, r0
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	e7b5      	b.n	8001202 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001296:	686a      	ldr	r2, [r5, #4]
 8001298:	4c29      	ldr	r4, [pc, #164]	; (8001340 <HAL_RCC_ClockConfig+0x158>)
 800129a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129c:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800129e:	d11c      	bne.n	80012da <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a4:	d0df      	beq.n	8001266 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012a6:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ac:	f023 0303 	bic.w	r3, r3, #3
 80012b0:	4313      	orrs	r3, r2
 80012b2:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80012b4:	f7ff f884 	bl	80003c0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b8:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80012ba:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d114      	bne.n	80012ea <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012c0:	6863      	ldr	r3, [r4, #4]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d09d      	beq.n	8001206 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ca:	f7ff f879 	bl	80003c0 <HAL_GetTick>
 80012ce:	1bc0      	subs	r0, r0, r7
 80012d0:	4540      	cmp	r0, r8
 80012d2:	d9f5      	bls.n	80012c0 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80012d4:	2003      	movs	r0, #3
 80012d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012da:	2a02      	cmp	r2, #2
 80012dc:	d102      	bne.n	80012e4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012e2:	e7df      	b.n	80012a4 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e4:	f013 0f02 	tst.w	r3, #2
 80012e8:	e7dc      	b.n	80012a4 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d10f      	bne.n	800130e <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012ee:	6863      	ldr	r3, [r4, #4]
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	d086      	beq.n	8001206 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f8:	f7ff f862 	bl	80003c0 <HAL_GetTick>
 80012fc:	1bc0      	subs	r0, r0, r7
 80012fe:	4540      	cmp	r0, r8
 8001300:	d9f5      	bls.n	80012ee <HAL_RCC_ClockConfig+0x106>
 8001302:	e7e7      	b.n	80012d4 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001304:	f7ff f85c 	bl	80003c0 <HAL_GetTick>
 8001308:	1bc0      	subs	r0, r0, r7
 800130a:	4540      	cmp	r0, r8
 800130c:	d8e2      	bhi.n	80012d4 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800130e:	6863      	ldr	r3, [r4, #4]
 8001310:	f013 0f0c 	tst.w	r3, #12
 8001314:	d1f6      	bne.n	8001304 <HAL_RCC_ClockConfig+0x11c>
 8001316:	e776      	b.n	8001206 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001318:	6813      	ldr	r3, [r2, #0]
 800131a:	f023 0307 	bic.w	r3, r3, #7
 800131e:	4333      	orrs	r3, r6
 8001320:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001322:	6813      	ldr	r3, [r2, #0]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	429e      	cmp	r6, r3
 800132a:	d19c      	bne.n	8001266 <HAL_RCC_ClockConfig+0x7e>
 800132c:	e772      	b.n	8001214 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800132e:	6863      	ldr	r3, [r4, #4]
 8001330:	68e9      	ldr	r1, [r5, #12]
 8001332:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001336:	430b      	orrs	r3, r1
 8001338:	6063      	str	r3, [r4, #4]
 800133a:	e771      	b.n	8001220 <HAL_RCC_ClockConfig+0x38>
 800133c:	40022000 	.word	0x40022000
 8001340:	40021000 	.word	0x40021000
 8001344:	08002794 	.word	0x08002794
 8001348:	20000000 	.word	0x20000000

0800134c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800134c:	6803      	ldr	r3, [r0, #0]
{
 800134e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001352:	07d9      	lsls	r1, r3, #31
{
 8001354:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001356:	d520      	bpl.n	800139a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001358:	4c35      	ldr	r4, [pc, #212]	; (8001430 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800135a:	69e3      	ldr	r3, [r4, #28]
 800135c:	00da      	lsls	r2, r3, #3
 800135e:	d432      	bmi.n	80013c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001360:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	69e3      	ldr	r3, [r4, #28]
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	61e3      	str	r3, [r4, #28]
 800136a:	69e3      	ldr	r3, [r4, #28]
 800136c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	4e2f      	ldr	r6, [pc, #188]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001376:	6833      	ldr	r3, [r6, #0]
 8001378:	05db      	lsls	r3, r3, #23
 800137a:	d526      	bpl.n	80013ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800137c:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800137e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001382:	d136      	bne.n	80013f2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001384:	6a23      	ldr	r3, [r4, #32]
 8001386:	686a      	ldr	r2, [r5, #4]
 8001388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800138c:	4313      	orrs	r3, r2
 800138e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001390:	b11f      	cbz	r7, 800139a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001392:	69e3      	ldr	r3, [r4, #28]
 8001394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001398:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800139a:	6828      	ldr	r0, [r5, #0]
 800139c:	0783      	lsls	r3, r0, #30
 800139e:	d506      	bpl.n	80013ae <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80013a0:	4a23      	ldr	r2, [pc, #140]	; (8001430 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80013a2:	68a9      	ldr	r1, [r5, #8]
 80013a4:	6853      	ldr	r3, [r2, #4]
 80013a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013aa:	430b      	orrs	r3, r1
 80013ac:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80013ae:	f010 0010 	ands.w	r0, r0, #16
 80013b2:	d01b      	beq.n	80013ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013b4:	4a1e      	ldr	r2, [pc, #120]	; (8001430 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80013b6:	68e9      	ldr	r1, [r5, #12]
 80013b8:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80013ba:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013c0:	430b      	orrs	r3, r1
 80013c2:	6053      	str	r3, [r2, #4]
 80013c4:	e012      	b.n	80013ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80013c6:	2700      	movs	r7, #0
 80013c8:	e7d4      	b.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ca:	6833      	ldr	r3, [r6, #0]
 80013cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80013d2:	f7fe fff5 	bl	80003c0 <HAL_GetTick>
 80013d6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d8:	6833      	ldr	r3, [r6, #0]
 80013da:	05d8      	lsls	r0, r3, #23
 80013dc:	d4ce      	bmi.n	800137c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013de:	f7fe ffef 	bl	80003c0 <HAL_GetTick>
 80013e2:	eba0 0008 	sub.w	r0, r0, r8
 80013e6:	2864      	cmp	r0, #100	; 0x64
 80013e8:	d9f6      	bls.n	80013d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80013ea:	2003      	movs	r0, #3
}
 80013ec:	b002      	add	sp, #8
 80013ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80013f2:	686a      	ldr	r2, [r5, #4]
 80013f4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d0c3      	beq.n	8001384 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80013fc:	2001      	movs	r0, #1
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001400:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001402:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001404:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001406:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800140a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800140c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800140e:	07d9      	lsls	r1, r3, #31
 8001410:	d5b8      	bpl.n	8001384 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001412:	f7fe ffd5 	bl	80003c0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001416:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800141a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141c:	6a23      	ldr	r3, [r4, #32]
 800141e:	079a      	lsls	r2, r3, #30
 8001420:	d4b0      	bmi.n	8001384 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001422:	f7fe ffcd 	bl	80003c0 <HAL_GetTick>
 8001426:	1b80      	subs	r0, r0, r6
 8001428:	4540      	cmp	r0, r8
 800142a:	d9f7      	bls.n	800141c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800142c:	e7dd      	b.n	80013ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	40007000 	.word	0x40007000
 8001438:	42420440 	.word	0x42420440

0800143c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800143c:	b084      	sub	sp, #16
 800143e:	a801      	add	r0, sp, #4
 8001440:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001444:	b004      	add	sp, #16
 8001446:	2000      	movs	r0, #0
 8001448:	4770      	bx	lr

0800144a <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800144a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800144e:	b29b      	uxth	r3, r3
 8001450:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001454:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001458:	2000      	movs	r0, #0
 800145a:	4770      	bx	lr

0800145c <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800145c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001460:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8001464:	045b      	lsls	r3, r3, #17
 8001466:	0c5b      	lsrs	r3, r3, #17
 8001468:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 800146c:	2000      	movs	r0, #0
 800146e:	4770      	bx	lr

08001470 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001470:	2000      	movs	r0, #0
 8001472:	4770      	bx	lr

08001474 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001474:	b084      	sub	sp, #16
 8001476:	b510      	push	{r4, lr}
 8001478:	ac03      	add	r4, sp, #12
 800147a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 800147e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 8001482:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001484:	2301      	movs	r3, #1
 8001486:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 800148a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 800148e:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8001492:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8001496:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 800149a:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 800149c:	b29b      	uxth	r3, r3
 800149e:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80014a2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 80014a6:	4610      	mov	r0, r2
 80014a8:	4770      	bx	lr
	...

080014ac <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80014ac:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 80014ae:	78cb      	ldrb	r3, [r1, #3]
 80014b0:	780a      	ldrb	r2, [r1, #0]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d80f      	bhi.n	80014d6 <USB_ActivateEndpoint+0x2a>
 80014b6:	e8df f003 	tbb	[pc, r3]
 80014ba:	6402      	.short	0x6402
 80014bc:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80014be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80014c2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80014c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ca:	041b      	lsls	r3, r3, #16
 80014cc:	0c1b      	lsrs	r3, r3, #16
 80014ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80014d2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80014d6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80014da:	780c      	ldrb	r4, [r1, #0]
 80014dc:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80014e0:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 80014e4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80014e8:	401a      	ands	r2, r3
 80014ea:	432a      	orrs	r2, r5
 80014ec:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 80014f0:	7a8a      	ldrb	r2, [r1, #10]
 80014f2:	780d      	ldrb	r5, [r1, #0]
 80014f4:	2a00      	cmp	r2, #0
 80014f6:	f040 8097 	bne.w	8001628 <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 80014fa:	784c      	ldrb	r4, [r1, #1]
 80014fc:	888a      	ldrh	r2, [r1, #4]
 80014fe:	2c00      	cmp	r4, #0
 8001500:	d04a      	beq.n	8001598 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001502:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8001506:	0852      	lsrs	r2, r2, #1
 8001508:	b2a4      	uxth	r4, r4
 800150a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800150e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8001512:	0052      	lsls	r2, r2, #1
 8001514:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001518:	780c      	ldrb	r4, [r1, #0]
 800151a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800151e:	0652      	lsls	r2, r2, #25
 8001520:	d508      	bpl.n	8001534 <USB_ActivateEndpoint+0x88>
 8001522:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001526:	4013      	ands	r3, r2
 8001528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800152c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001530:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8001534:	780a      	ldrb	r2, [r1, #0]
 8001536:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800153a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800153e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001542:	041b      	lsls	r3, r3, #16
 8001544:	0c1b      	lsrs	r3, r3, #16
 8001546:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800154a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800154e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001552:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001556:	2000      	movs	r0, #0
 8001558:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 800155a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800155e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001566:	041b      	lsls	r3, r3, #16
 8001568:	0c1b      	lsrs	r3, r3, #16
 800156a:	e7b2      	b.n	80014d2 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 800156c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001570:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001578:	041b      	lsls	r3, r3, #16
 800157a:	0c1b      	lsrs	r3, r3, #16
 800157c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001580:	e7a7      	b.n	80014d2 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001582:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001586:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800158a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800158e:	041b      	lsls	r3, r3, #16
 8001590:	0c1b      	lsrs	r3, r3, #16
 8001592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001596:	e79c      	b.n	80014d2 <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001598:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800159c:	0852      	lsrs	r2, r2, #1
 800159e:	b29b      	uxth	r3, r3
 80015a0:	3304      	adds	r3, #4
 80015a2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80015a6:	0052      	lsls	r2, r2, #1
 80015a8:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 80015ac:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80015b0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80015b4:	690d      	ldr	r5, [r1, #16]
 80015b6:	b292      	uxth	r2, r2
 80015b8:	780b      	ldrb	r3, [r1, #0]
 80015ba:	3206      	adds	r2, #6
 80015bc:	2d3e      	cmp	r5, #62	; 0x3e
 80015be:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80015c2:	d929      	bls.n	8001618 <USB_ActivateEndpoint+0x16c>
 80015c4:	f3c5 164f 	ubfx	r6, r5, #5, #16
 80015c8:	06eb      	lsls	r3, r5, #27
 80015ca:	bf04      	itt	eq
 80015cc:	f106 33ff 	addeq.w	r3, r6, #4294967295
 80015d0:	b29e      	uxtheq	r6, r3
 80015d2:	4b6e      	ldr	r3, [pc, #440]	; (800178c <USB_ActivateEndpoint+0x2e0>)
 80015d4:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80015d8:	b29b      	uxth	r3, r3
 80015da:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80015de:	780a      	ldrb	r2, [r1, #0]
 80015e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015e4:	045e      	lsls	r6, r3, #17
 80015e6:	d50b      	bpl.n	8001600 <USB_ActivateEndpoint+0x154>
 80015e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015f0:	051b      	lsls	r3, r3, #20
 80015f2:	0d1b      	lsrs	r3, r3, #20
 80015f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015fc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001600:	780a      	ldrb	r2, [r1, #0]
 8001602:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800160a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800160e:	041b      	lsls	r3, r3, #16
 8001610:	0c1b      	lsrs	r3, r3, #16
 8001612:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001616:	e798      	b.n	800154a <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001618:	f3c5 034f 	ubfx	r3, r5, #1, #16
 800161c:	07ed      	lsls	r5, r5, #31
 800161e:	bf44      	itt	mi
 8001620:	3301      	addmi	r3, #1
 8001622:	b29b      	uxthmi	r3, r3
 8001624:	029b      	lsls	r3, r3, #10
 8001626:	e7d7      	b.n	80015d8 <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001628:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 800162c:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8001630:	0512      	lsls	r2, r2, #20
 8001632:	0d12      	lsrs	r2, r2, #20
 8001634:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8001638:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800163c:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8001640:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001644:	780c      	ldrb	r4, [r1, #0]
 8001646:	b292      	uxth	r2, r2
 8001648:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800164c:	88cc      	ldrh	r4, [r1, #6]
 800164e:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8001652:	0864      	lsrs	r4, r4, #1
 8001654:	0064      	lsls	r4, r4, #1
 8001656:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 800165a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800165e:	780c      	ldrb	r4, [r1, #0]
 8001660:	b292      	uxth	r2, r2
 8001662:	3204      	adds	r2, #4
 8001664:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001668:	890c      	ldrh	r4, [r1, #8]
 800166a:	0864      	lsrs	r4, r4, #1
 800166c:	0064      	lsls	r4, r4, #1
 800166e:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 8001672:	784a      	ldrb	r2, [r1, #1]
 8001674:	780c      	ldrb	r4, [r1, #0]
 8001676:	2a00      	cmp	r2, #0
 8001678:	d147      	bne.n	800170a <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800167a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800167e:	0455      	lsls	r5, r2, #17
 8001680:	d508      	bpl.n	8001694 <USB_ActivateEndpoint+0x1e8>
 8001682:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001686:	4013      	ands	r3, r2
 8001688:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800168c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001690:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001694:	780a      	ldrb	r2, [r1, #0]
 8001696:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800169a:	065c      	lsls	r4, r3, #25
 800169c:	d50b      	bpl.n	80016b6 <USB_ActivateEndpoint+0x20a>
 800169e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016a6:	051b      	lsls	r3, r3, #20
 80016a8:	0d1b      	lsrs	r3, r3, #20
 80016aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80016b2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80016b6:	780a      	ldrb	r2, [r1, #0]
 80016b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016c0:	051b      	lsls	r3, r3, #20
 80016c2:	0d1b      	lsrs	r3, r3, #20
 80016c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80016cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80016d0:	f248 0280 	movw	r2, #32896	; 0x8080
 80016d4:	780c      	ldrb	r4, [r1, #0]
 80016d6:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80016da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016e2:	041b      	lsls	r3, r3, #16
 80016e4:	0c1b      	lsrs	r3, r3, #16
 80016e6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80016ea:	4313      	orrs	r3, r2
 80016ec:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80016f0:	7809      	ldrb	r1, [r1, #0]
 80016f2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80016f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80016fe:	041b      	lsls	r3, r3, #16
 8001700:	0c1b      	lsrs	r3, r3, #16
 8001702:	4313      	orrs	r3, r2
 8001704:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001708:	e725      	b.n	8001556 <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800170a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800170e:	0452      	lsls	r2, r2, #17
 8001710:	d508      	bpl.n	8001724 <USB_ActivateEndpoint+0x278>
 8001712:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001716:	4013      	ands	r3, r2
 8001718:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800171c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001720:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001724:	780a      	ldrb	r2, [r1, #0]
 8001726:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800172a:	065b      	lsls	r3, r3, #25
 800172c:	d50b      	bpl.n	8001746 <USB_ActivateEndpoint+0x29a>
 800172e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001736:	051b      	lsls	r3, r3, #20
 8001738:	0d1b      	lsrs	r3, r3, #20
 800173a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800173e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001742:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001746:	780a      	ldrb	r2, [r1, #0]
 8001748:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800174c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	0d1b      	lsrs	r3, r3, #20
 8001754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800175c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001760:	f248 0280 	movw	r2, #32896	; 0x8080
 8001764:	780c      	ldrb	r4, [r1, #0]
 8001766:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800176a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800176e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001772:	041b      	lsls	r3, r3, #16
 8001774:	0c1b      	lsrs	r3, r3, #16
 8001776:	4313      	orrs	r3, r2
 8001778:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800177c:	7809      	ldrb	r1, [r1, #0]
 800177e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800178a:	e7b8      	b.n	80016fe <USB_ActivateEndpoint+0x252>
 800178c:	ffff8000 	.word	0xffff8000

08001790 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001790:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8001792:	7a8c      	ldrb	r4, [r1, #10]
 8001794:	784a      	ldrb	r2, [r1, #1]
 8001796:	780b      	ldrb	r3, [r1, #0]
 8001798:	bbcc      	cbnz	r4, 800180e <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 800179a:	b302      	cbz	r2, 80017de <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800179c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80017a0:	0652      	lsls	r2, r2, #25
 80017a2:	d50b      	bpl.n	80017bc <USB_DeactivateEndpoint+0x2c>
 80017a4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80017a8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80017ac:	0512      	lsls	r2, r2, #20
 80017ae:	0d12      	lsrs	r2, r2, #20
 80017b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017b4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80017b8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80017bc:	780a      	ldrb	r2, [r1, #0]
 80017be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80017ca:	041b      	lsls	r3, r3, #16
 80017cc:	0c1b      	lsrs	r3, r3, #16
 80017ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80017da:	2000      	movs	r0, #0
 80017dc:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80017de:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80017e2:	0454      	lsls	r4, r2, #17
 80017e4:	d50b      	bpl.n	80017fe <USB_DeactivateEndpoint+0x6e>
 80017e6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80017ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80017ee:	0512      	lsls	r2, r2, #20
 80017f0:	0d12      	lsrs	r2, r2, #20
 80017f2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80017f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017fa:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80017fe:	780a      	ldrb	r2, [r1, #0]
 8001800:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001804:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800180c:	e7dd      	b.n	80017ca <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 800180e:	2a00      	cmp	r2, #0
 8001810:	d148      	bne.n	80018a4 <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001812:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001816:	0452      	lsls	r2, r2, #17
 8001818:	d50b      	bpl.n	8001832 <USB_DeactivateEndpoint+0xa2>
 800181a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800181e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001822:	0512      	lsls	r2, r2, #20
 8001824:	0d12      	lsrs	r2, r2, #20
 8001826:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800182a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800182e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001832:	780a      	ldrb	r2, [r1, #0]
 8001834:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001838:	065c      	lsls	r4, r3, #25
 800183a:	d50b      	bpl.n	8001854 <USB_DeactivateEndpoint+0xc4>
 800183c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001840:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001844:	051b      	lsls	r3, r3, #20
 8001846:	0d1b      	lsrs	r3, r3, #20
 8001848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800184c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001850:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001854:	780a      	ldrb	r2, [r1, #0]
 8001856:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800185a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800185e:	051b      	lsls	r3, r3, #20
 8001860:	0d1b      	lsrs	r3, r3, #20
 8001862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001866:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800186a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800186e:	f248 0280 	movw	r2, #32896	; 0x8080
 8001872:	780c      	ldrb	r4, [r1, #0]
 8001874:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001878:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800187c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001880:	041b      	lsls	r3, r3, #16
 8001882:	0c1b      	lsrs	r3, r3, #16
 8001884:	4313      	orrs	r3, r2
 8001886:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800188a:	7809      	ldrb	r1, [r1, #0]
 800188c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001898:	041b      	lsls	r3, r3, #16
 800189a:	0c1b      	lsrs	r3, r3, #16
 800189c:	4313      	orrs	r3, r2
 800189e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80018a2:	e79a      	b.n	80017da <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80018a4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80018a8:	0452      	lsls	r2, r2, #17
 80018aa:	d50b      	bpl.n	80018c4 <USB_DeactivateEndpoint+0x134>
 80018ac:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80018b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80018b4:	0512      	lsls	r2, r2, #20
 80018b6:	0d12      	lsrs	r2, r2, #20
 80018b8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80018bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018c0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80018c4:	780a      	ldrb	r2, [r1, #0]
 80018c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018ca:	065b      	lsls	r3, r3, #25
 80018cc:	d50b      	bpl.n	80018e6 <USB_DeactivateEndpoint+0x156>
 80018ce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018d6:	051b      	lsls	r3, r3, #20
 80018d8:	0d1b      	lsrs	r3, r3, #20
 80018da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80018e2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80018e6:	780a      	ldrb	r2, [r1, #0]
 80018e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018f0:	051b      	lsls	r3, r3, #20
 80018f2:	0d1b      	lsrs	r3, r3, #20
 80018f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001900:	f248 0280 	movw	r2, #32896	; 0x8080
 8001904:	780c      	ldrb	r4, [r1, #0]
 8001906:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800190a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800190e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001912:	041b      	lsls	r3, r3, #16
 8001914:	0c1b      	lsrs	r3, r3, #16
 8001916:	4313      	orrs	r3, r2
 8001918:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800191c:	7809      	ldrb	r1, [r1, #0]
 800191e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800192a:	e7b5      	b.n	8001898 <USB_DeactivateEndpoint+0x108>

0800192c <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 800192c:	780a      	ldrb	r2, [r1, #0]
 800192e:	b98a      	cbnz	r2, 8001954 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8001930:	8803      	ldrh	r3, [r0, #0]
 8001932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800193a:	041b      	lsls	r3, r3, #16
 800193c:	0c1b      	lsrs	r3, r3, #16
 800193e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001942:	f083 0310 	eor.w	r3, r3, #16
 8001946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800194a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194e:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8001950:	2000      	movs	r0, #0
 8001952:	4770      	bx	lr
    if (ep->is_in)
 8001954:	784b      	ldrb	r3, [r1, #1]
 8001956:	b183      	cbz	r3, 800197a <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8001958:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800195c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001964:	041b      	lsls	r3, r3, #16
 8001966:	0c1b      	lsrs	r3, r3, #16
 8001968:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 800196c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001974:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001978:	e7ea      	b.n	8001950 <USB_EPSetStall+0x24>
 800197a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800197e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001986:	041b      	lsls	r3, r3, #16
 8001988:	0c1b      	lsrs	r3, r3, #16
 800198a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800198e:	e7ed      	b.n	800196c <USB_EPSetStall+0x40>

08001990 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8001990:	784b      	ldrb	r3, [r1, #1]
 8001992:	780a      	ldrb	r2, [r1, #0]
 8001994:	b313      	cbz	r3, 80019dc <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001996:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800199a:	065b      	lsls	r3, r3, #25
 800199c:	d50b      	bpl.n	80019b6 <USB_EPClearStall+0x26>
 800199e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019a6:	051b      	lsls	r3, r3, #20
 80019a8:	0d1b      	lsrs	r3, r3, #20
 80019aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019b2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80019b6:	780a      	ldrb	r2, [r1, #0]
 80019b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019c4:	041b      	lsls	r3, r3, #16
 80019c6:	0c1b      	lsrs	r3, r3, #16
 80019c8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80019cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 80019d8:	2000      	movs	r0, #0
 80019da:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80019dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019e0:	045b      	lsls	r3, r3, #17
 80019e2:	d50b      	bpl.n	80019fc <USB_EPClearStall+0x6c>
 80019e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019ec:	051b      	lsls	r3, r3, #20
 80019ee:	0d1b      	lsrs	r3, r3, #20
 80019f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80019fc:	780a      	ldrb	r2, [r1, #0]
 80019fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a0a:	041b      	lsls	r3, r3, #16
 8001a0c:	0c1b      	lsrs	r3, r3, #16
 8001a0e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001a12:	e7db      	b.n	80019cc <USB_EPClearStall+0x3c>

08001a14 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8001a14:	b911      	cbnz	r1, 8001a1c <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	4770      	bx	lr

08001a20 <USB_DevConnect>:
 8001a20:	2000      	movs	r0, #0
 8001a22:	4770      	bx	lr

08001a24 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001a24:	2000      	movs	r0, #0
 8001a26:	4770      	bx	lr

08001a28 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8001a28:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001a2c:	b280      	uxth	r0, r0
 8001a2e:	4770      	bx	lr

08001a30 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001a30:	2000      	movs	r0, #0
 8001a32:	4770      	bx	lr

08001a34 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001a34:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001a36:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001a38:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001a3a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001a3e:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001a40:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001a44:	42a3      	cmp	r3, r4
 8001a46:	d100      	bne.n	8001a4a <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001a48:	bd10      	pop	{r4, pc}
 8001a4a:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8001a4e:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8001a52:	3401      	adds	r4, #1
 8001a54:	e7f6      	b.n	8001a44 <USB_WritePMA+0x10>
	...

08001a58 <USB_EPStartXfer>:
{
 8001a58:	b570      	push	{r4, r5, r6, lr}
 8001a5a:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8001a5c:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8001a5e:	7849      	ldrb	r1, [r1, #1]
{
 8001a60:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8001a62:	2901      	cmp	r1, #1
 8001a64:	6933      	ldr	r3, [r6, #16]
 8001a66:	7ab0      	ldrb	r0, [r6, #10]
 8001a68:	d166      	bne.n	8001b38 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	461c      	mov	r4, r3
      ep->xfer_len =0;
 8001a6e:	bf9b      	ittet	ls
 8001a70:	2300      	movls	r3, #0
 8001a72:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8001a74:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8001a76:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8001a78:	bf88      	it	hi
 8001a7a:	61b2      	strhi	r2, [r6, #24]
 8001a7c:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 8001a7e:	bb10      	cbnz	r0, 8001ac6 <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8001a80:	88b2      	ldrh	r2, [r6, #4]
 8001a82:	6971      	ldr	r1, [r6, #20]
 8001a84:	4628      	mov	r0, r5
 8001a86:	f7ff ffd5 	bl	8001a34 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001a8a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8001a8e:	7832      	ldrb	r2, [r6, #0]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	3302      	adds	r3, #2
 8001a94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001a98:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001a9c:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001aa0:	7832      	ldrb	r2, [r6, #0]
 8001aa2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001aae:	041b      	lsls	r3, r3, #16
 8001ab0:	0c1b      	lsrs	r3, r3, #16
 8001ab2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001abe:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001ac6:	7832      	ldrb	r2, [r6, #0]
 8001ac8:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8001acc:	00d2      	lsls	r2, r2, #3
 8001ace:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001ad2:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001ad6:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001ad8:	d01a      	beq.n	8001b10 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001ada:	3102      	adds	r1, #2
 8001adc:	440a      	add	r2, r1
 8001ade:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001ae2:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8001ae6:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001ae8:	6971      	ldr	r1, [r6, #20]
 8001aea:	4628      	mov	r0, r5
 8001aec:	f7ff ffa2 	bl	8001a34 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001af0:	7873      	ldrb	r3, [r6, #1]
 8001af2:	7832      	ldrb	r2, [r6, #0]
 8001af4:	b99b      	cbnz	r3, 8001b1e <USB_EPStartXfer+0xc6>
 8001af6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001afe:	051b      	lsls	r3, r3, #20
 8001b00:	0d1b      	lsrs	r3, r3, #20
 8001b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b0a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8001b0e:	e7c7      	b.n	8001aa0 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001b10:	440a      	add	r2, r1
 8001b12:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001b16:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 8001b1a:	88f2      	ldrh	r2, [r6, #6]
 8001b1c:	e7e4      	b.n	8001ae8 <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d1be      	bne.n	8001aa0 <USB_EPStartXfer+0x48>
 8001b22:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b2a:	051b      	lsls	r3, r3, #20
 8001b2c:	0d1b      	lsrs	r3, r3, #20
 8001b2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b36:	e7e8      	b.n	8001b0a <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8001b38:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 8001b3a:	bf93      	iteet	ls
 8001b3c:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 8001b3e:	1ad2      	subhi	r2, r2, r3
 8001b40:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 8001b42:	61b3      	strls	r3, [r6, #24]
 8001b44:	bf98      	it	ls
 8001b46:	4613      	movls	r3, r2
 8001b48:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 8001b4a:	bb70      	cbnz	r0, 8001baa <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001b4c:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001b50:	2b3e      	cmp	r3, #62	; 0x3e
 8001b52:	b289      	uxth	r1, r1
 8001b54:	f101 0106 	add.w	r1, r1, #6
 8001b58:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8001b5c:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8001b60:	d918      	bls.n	8001b94 <USB_EPStartXfer+0x13c>
 8001b62:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8001b66:	06db      	lsls	r3, r3, #27
 8001b68:	bf04      	itt	eq
 8001b6a:	f102 33ff 	addeq.w	r3, r2, #4294967295
 8001b6e:	b29a      	uxtheq	r2, r3
 8001b70:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <USB_EPStartXfer+0x1fc>)
 8001b72:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001b7c:	7832      	ldrb	r2, [r6, #0]
 8001b7e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b8a:	041b      	lsls	r3, r3, #16
 8001b8c:	0c1b      	lsrs	r3, r3, #16
 8001b8e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001b92:	e790      	b.n	8001ab6 <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001b94:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8001b98:	07dc      	lsls	r4, r3, #31
 8001b9a:	bf44      	itt	mi
 8001b9c:	3201      	addmi	r2, #1
 8001b9e:	b292      	uxthmi	r2, r2
 8001ba0:	0292      	lsls	r2, r2, #10
 8001ba2:	b292      	uxth	r2, r2
 8001ba4:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8001ba8:	e7e8      	b.n	8001b7c <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001baa:	b9b9      	cbnz	r1, 8001bdc <USB_EPStartXfer+0x184>
 8001bac:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001bb0:	2b3e      	cmp	r3, #62	; 0x3e
 8001bb2:	b289      	uxth	r1, r1
 8001bb4:	f101 0102 	add.w	r1, r1, #2
 8001bb8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8001bbc:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8001bc0:	d928      	bls.n	8001c14 <USB_EPStartXfer+0x1bc>
 8001bc2:	f3c3 104f 	ubfx	r0, r3, #5, #16
 8001bc6:	06da      	lsls	r2, r3, #27
 8001bc8:	bf04      	itt	eq
 8001bca:	f100 32ff 	addeq.w	r2, r0, #4294967295
 8001bce:	b290      	uxtheq	r0, r2
 8001bd0:	4a20      	ldr	r2, [pc, #128]	; (8001c54 <USB_EPStartXfer+0x1fc>)
 8001bd2:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8001bd6:	b292      	uxth	r2, r2
 8001bd8:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 8001bdc:	7872      	ldrb	r2, [r6, #1]
 8001bde:	7831      	ldrb	r1, [r6, #0]
 8001be0:	bb5a      	cbnz	r2, 8001c3a <USB_EPStartXfer+0x1e2>
 8001be2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001be6:	2b3e      	cmp	r3, #62	; 0x3e
 8001be8:	b292      	uxth	r2, r2
 8001bea:	f102 0206 	add.w	r2, r2, #6
 8001bee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8001bf2:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8001bf6:	d915      	bls.n	8001c24 <USB_EPStartXfer+0x1cc>
 8001bf8:	f3c3 114f 	ubfx	r1, r3, #5, #16
 8001bfc:	06dc      	lsls	r4, r3, #27
 8001bfe:	bf04      	itt	eq
 8001c00:	f101 33ff 	addeq.w	r3, r1, #4294967295
 8001c04:	b299      	uxtheq	r1, r3
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <USB_EPStartXfer+0x1fc>)
 8001c08:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 8001c12:	e7b3      	b.n	8001b7c <USB_EPStartXfer+0x124>
 8001c14:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8001c18:	07d8      	lsls	r0, r3, #31
 8001c1a:	bf44      	itt	mi
 8001c1c:	3201      	addmi	r2, #1
 8001c1e:	b292      	uxthmi	r2, r2
 8001c20:	0292      	lsls	r2, r2, #10
 8001c22:	e7d8      	b.n	8001bd6 <USB_EPStartXfer+0x17e>
 8001c24:	f3c3 014f 	ubfx	r1, r3, #1, #16
 8001c28:	07db      	lsls	r3, r3, #31
 8001c2a:	bf44      	itt	mi
 8001c2c:	3101      	addmi	r1, #1
 8001c2e:	b289      	uxthmi	r1, r1
 8001c30:	0289      	lsls	r1, r1, #10
 8001c32:	b289      	uxth	r1, r1
 8001c34:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 8001c38:	e7a0      	b.n	8001b7c <USB_EPStartXfer+0x124>
 8001c3a:	2a01      	cmp	r2, #1
 8001c3c:	d19e      	bne.n	8001b7c <USB_EPStartXfer+0x124>
 8001c3e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001c42:	b292      	uxth	r2, r2
 8001c44:	3202      	adds	r2, #2
 8001c46:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8001c4a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001c4e:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8001c52:	e793      	b.n	8001b7c <USB_EPStartXfer+0x124>
 8001c54:	ffff8000 	.word	0xffff8000

08001c58 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001c58:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001c5a:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001c5c:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001c5e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001c62:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001c64:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001c68:	42a3      	cmp	r3, r4
 8001c6a:	d100      	bne.n	8001c6e <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8001c6c:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001c6e:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8001c72:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8001c76:	3401      	adds	r4, #1
 8001c78:	e7f6      	b.n	8001c68 <USB_ReadPMA+0x10>
	...

08001c7c <USBD_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CfgDesc);
 8001c7c:	2322      	movs	r3, #34	; 0x22
 8001c7e:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgDesc;
}
 8001c80:	4800      	ldr	r0, [pc, #0]	; (8001c84 <USBD_HID_GetCfgDesc+0x8>)
 8001c82:	4770      	bx	lr
 8001c84:	20000090 	.word	0x20000090

08001c88 <USBD_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8001c88:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	7318      	strb	r0, [r3, #12]
  return USBD_OK;
}
 8001c90:	4770      	bx	lr
	...

08001c94 <USBD_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 8001c94:	230a      	movs	r3, #10
 8001c96:	8003      	strh	r3, [r0, #0]
  return USBD_HID_DeviceQualifierDesc;
}
 8001c98:	4800      	ldr	r0, [pc, #0]	; (8001c9c <USBD_HID_GetDeviceQualifierDesc+0x8>)
 8001c9a:	4770      	bx	lr
 8001c9c:	200000c0 	.word	0x200000c0

08001ca0 <USBD_HID_Setup>:
{
 8001ca0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001ca2:	780c      	ldrb	r4, [r1, #0]
{
 8001ca4:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001ca6:	f014 0460 	ands.w	r4, r4, #96	; 0x60
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8001caa:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001cae:	d023      	beq.n	8001cf8 <USBD_HID_Setup+0x58>
 8001cb0:	2c20      	cmp	r4, #32
 8001cb2:	d10c      	bne.n	8001cce <USBD_HID_Setup+0x2e>
    switch (req->bRequest)
 8001cb4:	784a      	ldrb	r2, [r1, #1]
 8001cb6:	3a02      	subs	r2, #2
 8001cb8:	2a09      	cmp	r2, #9
 8001cba:	d817      	bhi.n	8001cec <USBD_HID_Setup+0x4c>
 8001cbc:	e8df f002 	tbb	[pc, r2]
 8001cc0:	16160913 	.word	0x16160913
 8001cc4:	16161616 	.word	0x16161616
 8001cc8:	050f      	.short	0x050f
      hhid->Protocol = (uint8_t)(req->wValue);
 8001cca:	788a      	ldrb	r2, [r1, #2]
 8001ccc:	601a      	str	r2, [r3, #0]
  return USBD_OK;
 8001cce:	2400      	movs	r4, #0
 8001cd0:	e010      	b.n	8001cf4 <USBD_HID_Setup+0x54>
      USBD_CtlSendData (pdev, 
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4619      	mov	r1, r3
      USBD_CtlSendData (pdev, 
 8001cd6:	4628      	mov	r0, r5
 8001cd8:	f000 fb46 	bl	8002368 <USBD_CtlSendData>
 8001cdc:	e7f7      	b.n	8001cce <USBD_HID_Setup+0x2e>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8001cde:	884a      	ldrh	r2, [r1, #2]
 8001ce0:	0a12      	lsrs	r2, r2, #8
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	e7f3      	b.n	8001cce <USBD_HID_Setup+0x2e>
      USBD_CtlSendData (pdev, 
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	1d19      	adds	r1, r3, #4
 8001cea:	e7f4      	b.n	8001cd6 <USBD_HID_Setup+0x36>
      USBD_CtlError (pdev, req);
 8001cec:	4628      	mov	r0, r5
 8001cee:	f000 fb14 	bl	800231a <USBD_CtlError>
      return USBD_FAIL; 
 8001cf2:	2402      	movs	r4, #2
}
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 8001cf8:	784a      	ldrb	r2, [r1, #1]
 8001cfa:	2a0a      	cmp	r2, #10
 8001cfc:	d018      	beq.n	8001d30 <USBD_HID_Setup+0x90>
 8001cfe:	2a0b      	cmp	r2, #11
 8001d00:	d01c      	beq.n	8001d3c <USBD_HID_Setup+0x9c>
 8001d02:	2a06      	cmp	r2, #6
 8001d04:	d1f6      	bne.n	8001cf4 <USBD_HID_Setup+0x54>
      if( req->wValue >> 8 == HID_REPORT_DESC)
 8001d06:	884b      	ldrh	r3, [r1, #2]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	2b22      	cmp	r3, #34	; 0x22
 8001d0c:	d105      	bne.n	8001d1a <USBD_HID_Setup+0x7a>
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 8001d0e:	88ca      	ldrh	r2, [r1, #6]
        pbuf = HID_MOUSE_ReportDesc;
 8001d10:	490c      	ldr	r1, [pc, #48]	; (8001d44 <USBD_HID_Setup+0xa4>)
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 8001d12:	2a4a      	cmp	r2, #74	; 0x4a
 8001d14:	bf28      	it	cs
 8001d16:	224a      	movcs	r2, #74	; 0x4a
 8001d18:	e7dd      	b.n	8001cd6 <USBD_HID_Setup+0x36>
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8001d1a:	2b21      	cmp	r3, #33	; 0x21
 8001d1c:	d105      	bne.n	8001d2a <USBD_HID_Setup+0x8a>
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 8001d1e:	88ca      	ldrh	r2, [r1, #6]
        pbuf = USBD_HID_Desc;   
 8001d20:	4909      	ldr	r1, [pc, #36]	; (8001d48 <USBD_HID_Setup+0xa8>)
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 8001d22:	2a09      	cmp	r2, #9
 8001d24:	bf28      	it	cs
 8001d26:	2209      	movcs	r2, #9
 8001d28:	e7d5      	b.n	8001cd6 <USBD_HID_Setup+0x36>
  uint8_t  *pbuf = NULL;
 8001d2a:	4621      	mov	r1, r4
  uint16_t len = 0;
 8001d2c:	4622      	mov	r2, r4
 8001d2e:	e7d2      	b.n	8001cd6 <USBD_HID_Setup+0x36>
      USBD_CtlSendData (pdev,
 8001d30:	2201      	movs	r2, #1
 8001d32:	f103 0108 	add.w	r1, r3, #8
 8001d36:	f000 fb17 	bl	8002368 <USBD_CtlSendData>
      break;
 8001d3a:	e7db      	b.n	8001cf4 <USBD_HID_Setup+0x54>
      hhid->AltSetting = (uint8_t)(req->wValue);
 8001d3c:	788a      	ldrb	r2, [r1, #2]
 8001d3e:	609a      	str	r2, [r3, #8]
      break;
 8001d40:	e7d8      	b.n	8001cf4 <USBD_HID_Setup+0x54>
 8001d42:	bf00      	nop
 8001d44:	2000000c 	.word	0x2000000c
 8001d48:	200000b4 	.word	0x200000b4

08001d4c <USBD_HID_DeInit>:
{
 8001d4c:	b510      	push	{r4, lr}
 8001d4e:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8001d50:	2181      	movs	r1, #129	; 0x81
 8001d52:	f000 fc4f 	bl	80025f4 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8001d56:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8001d5a:	b120      	cbz	r0, 8001d66 <USBD_HID_DeInit+0x1a>
    USBD_free(pdev->pClassData);
 8001d5c:	f000 fcb2 	bl	80026c4 <USBD_static_free>
    pdev->pClassData = NULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8001d66:	2000      	movs	r0, #0
 8001d68:	bd10      	pop	{r4, pc}

08001d6a <USBD_HID_Init>:
{
 8001d6a:	b510      	push	{r4, lr}
  USBD_LL_OpenEP(pdev,
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	2203      	movs	r2, #3
 8001d70:	2181      	movs	r1, #129	; 0x81
{
 8001d72:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8001d74:	f000 fc2e 	bl	80025d4 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 8001d78:	2010      	movs	r0, #16
 8001d7a:	f000 fc9f 	bl	80026bc <USBD_static_malloc>
 8001d7e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8001d82:	b118      	cbz	r0, 8001d8c <USBD_HID_Init+0x22>
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	7303      	strb	r3, [r0, #12]
  uint8_t ret = 0;
 8001d88:	4618      	mov	r0, r3
 8001d8a:	bd10      	pop	{r4, pc}
    ret = 1; 
 8001d8c:	2001      	movs	r0, #1
}
 8001d8e:	bd10      	pop	{r4, pc}

08001d90 <USBD_HID_SendReport>:
{
 8001d90:	b510      	push	{r4, lr}
 8001d92:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8001d94:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8001d98:	2a03      	cmp	r2, #3
 8001d9a:	d109      	bne.n	8001db0 <USBD_HID_SendReport+0x20>
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 8001d9c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
    if(hhid->state == HID_IDLE)
 8001da0:	7b22      	ldrb	r2, [r4, #12]
 8001da2:	b92a      	cbnz	r2, 8001db0 <USBD_HID_SendReport+0x20>
      hhid->state = HID_BUSY;
 8001da4:	2201      	movs	r2, #1
 8001da6:	7322      	strb	r2, [r4, #12]
      USBD_LL_Transmit (pdev, 
 8001da8:	460a      	mov	r2, r1
 8001daa:	2181      	movs	r1, #129	; 0x81
 8001dac:	f000 fc6a 	bl	8002684 <USBD_LL_Transmit>
}
 8001db0:	2000      	movs	r0, #0
 8001db2:	bd10      	pop	{r4, pc}

08001db4 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8001db4:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8001db6:	b180      	cbz	r0, 8001dda <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8001db8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001dbc:	b113      	cbz	r3, 8001dc4 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8001dc4:	b109      	cbz	r1, 8001dca <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8001dc6:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8001dca:	2301      	movs	r3, #1
  pdev->id = id;
 8001dcc:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8001dce:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8001dd2:	f000 fbbd 	bl	8002550 <USBD_LL_Init>
  
  return USBD_OK; 
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8001dda:	2002      	movs	r0, #2
}
 8001ddc:	bd08      	pop	{r3, pc}

08001dde <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8001dde:	b119      	cbz	r1, 8001de8 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8001de0:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8001de4:	2000      	movs	r0, #0
 8001de6:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8001de8:	2002      	movs	r0, #2
  }
  
  return status;
}
 8001dea:	4770      	bx	lr

08001dec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8001dec:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8001dee:	f000 fbe3 	bl	80025b8 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8001df2:	2000      	movs	r0, #0
 8001df4:	bd08      	pop	{r3, pc}

08001df6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8001df6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8001df8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001dfc:	b90b      	cbnz	r3, 8001e02 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8001dfe:	2002      	movs	r0, #2
 8001e00:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4798      	blx	r3
 8001e06:	2800      	cmp	r0, #0
 8001e08:	d1f9      	bne.n	8001dfe <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8001e0a:	bd08      	pop	{r3, pc}

08001e0c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8001e0c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8001e0e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4798      	blx	r3
  return USBD_OK;
}
 8001e16:	2000      	movs	r0, #0
 8001e18:	bd08      	pop	{r3, pc}

08001e1a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8001e1a:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8001e1c:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 8001e20:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8001e22:	4628      	mov	r0, r5
 8001e24:	f000 fa65 	bl	80022f2 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8001e28:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8001e2a:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8001e2e:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8001e32:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8001e36:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8001e3a:	f001 031f 	and.w	r3, r1, #31
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d00e      	beq.n	8001e60 <USBD_LL_SetupStage+0x46>
 8001e42:	d307      	bcc.n	8001e54 <USBD_LL_SetupStage+0x3a>
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d010      	beq.n	8001e6a <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8001e48:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f000 fbdf 	bl	8002610 <USBD_LL_StallEP>
    break;
 8001e52:	e003      	b.n	8001e5c <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8001e54:	4629      	mov	r1, r5
 8001e56:	4620      	mov	r0, r4
 8001e58:	f000 f8d6 	bl	8002008 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8001e60:	4629      	mov	r1, r5
 8001e62:	4620      	mov	r0, r4
 8001e64:	f000 f9ca 	bl	80021fc <USBD_StdItfReq>
    break;
 8001e68:	e7f8      	b.n	8001e5c <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	f000 f9dd 	bl	800222c <USBD_StdEPReq>
    break;
 8001e72:	e7f3      	b.n	8001e5c <USBD_LL_SetupStage+0x42>

08001e74 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8001e74:	b538      	push	{r3, r4, r5, lr}
 8001e76:	4604      	mov	r4, r0
 8001e78:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8001e7a:	bb11      	cbnz	r1, 8001ec2 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8001e7c:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d10f      	bne.n	8001ea4 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8001e84:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8001e88:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d90b      	bls.n	8001ea8 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8001e90:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8001e92:	429a      	cmp	r2, r3
 8001e94:	bf28      	it	cs
 8001e96:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8001e98:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8001e9c:	b292      	uxth	r2, r2
 8001e9e:	4629      	mov	r1, r5
 8001ea0:	f000 fa77 	bl	8002392 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8001ea8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	b123      	cbz	r3, 8001eba <USBD_LL_DataOutStage+0x46>
 8001eb0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8001eb4:	2a03      	cmp	r2, #3
 8001eb6:	d100      	bne.n	8001eba <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8001eb8:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8001eba:	4620      	mov	r0, r4
 8001ebc:	f000 fa71 	bl	80023a2 <USBD_CtlSendStatus>
 8001ec0:	e7f0      	b.n	8001ea4 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8001ec2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0eb      	beq.n	8001ea4 <USBD_LL_DataOutStage+0x30>
 8001ecc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8001ed0:	2a03      	cmp	r2, #3
 8001ed2:	d1e7      	bne.n	8001ea4 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8001ed4:	4798      	blx	r3
 8001ed6:	e7e5      	b.n	8001ea4 <USBD_LL_DataOutStage+0x30>

08001ed8 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8001ed8:	b570      	push	{r4, r5, r6, lr}
 8001eda:	4613      	mov	r3, r2
 8001edc:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8001ede:	460e      	mov	r6, r1
 8001ee0:	2900      	cmp	r1, #0
 8001ee2:	d13d      	bne.n	8001f60 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8001ee4:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8001ee8:	2a02      	cmp	r2, #2
 8001eea:	d10f      	bne.n	8001f0c <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8001eec:	69c5      	ldr	r5, [r0, #28]
 8001eee:	6a02      	ldr	r2, [r0, #32]
 8001ef0:	4295      	cmp	r5, r2
 8001ef2:	d914      	bls.n	8001f1e <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8001ef4:	1aaa      	subs	r2, r5, r2
 8001ef6:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8001ef8:	4619      	mov	r1, r3
 8001efa:	b292      	uxth	r2, r2
 8001efc:	f000 fa41 	bl	8002382 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8001f00:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8001f02:	461a      	mov	r2, r3
 8001f04:	4619      	mov	r1, r3
 8001f06:	4620      	mov	r0, r4
 8001f08:	f000 fbca 	bl	80026a0 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8001f0c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d102      	bne.n	8001f1a <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8001f1e:	6983      	ldr	r3, [r0, #24]
 8001f20:	fbb3 f5f2 	udiv	r5, r3, r2
 8001f24:	fb02 3515 	mls	r5, r2, r5, r3
 8001f28:	b965      	cbnz	r5, 8001f44 <USBD_LL_DataInStage+0x6c>
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d80a      	bhi.n	8001f44 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8001f2e:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d206      	bcs.n	8001f44 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8001f36:	462a      	mov	r2, r5
 8001f38:	f000 fa23 	bl	8002382 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8001f3c:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8001f40:	462b      	mov	r3, r5
 8001f42:	e7de      	b.n	8001f02 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8001f44:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	b12b      	cbz	r3, 8001f58 <USBD_LL_DataInStage+0x80>
 8001f4c:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8001f50:	2a03      	cmp	r2, #3
 8001f52:	d101      	bne.n	8001f58 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8001f54:	4620      	mov	r0, r4
 8001f56:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f000 fa2d 	bl	80023b8 <USBD_CtlReceiveStatus>
 8001f5e:	e7d5      	b.n	8001f0c <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8001f60:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0d7      	beq.n	8001f1a <USBD_LL_DataInStage+0x42>
 8001f6a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8001f6e:	2a03      	cmp	r2, #3
 8001f70:	d1d3      	bne.n	8001f1a <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8001f72:	4798      	blx	r3
 8001f74:	e7d1      	b.n	8001f1a <USBD_LL_DataInStage+0x42>

08001f76 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8001f76:	2200      	movs	r2, #0
{
 8001f78:	b538      	push	{r3, r4, r5, lr}
 8001f7a:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8001f7c:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8001f7e:	4611      	mov	r1, r2
 8001f80:	2340      	movs	r3, #64	; 0x40
 8001f82:	f000 fb27 	bl	80025d4 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8001f86:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8001f88:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2180      	movs	r1, #128	; 0x80
 8001f90:	4620      	mov	r0, r4
 8001f92:	f000 fb1f 	bl	80025d4 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8001f96:	2301      	movs	r3, #1
 8001f98:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8001f9c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8001fa0:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8001fa2:	b12b      	cbz	r3, 8001fb0 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8001fa4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8001fa8:	7921      	ldrb	r1, [r4, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4620      	mov	r0, r4
 8001fae:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	bd38      	pop	{r3, r4, r5, pc}

08001fb4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8001fb4:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	4770      	bx	lr

08001fba <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8001fba:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8001fbe:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8001fc8:	2000      	movs	r0, #0
 8001fca:	4770      	bx	lr

08001fcc <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8001fcc:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8001fd0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	4770      	bx	lr

08001fd8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8001fd8:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8001fda:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8001fde:	2a03      	cmp	r2, #3
 8001fe0:	d104      	bne.n	8001fec <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8001fe2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	b103      	cbz	r3, 8001fec <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8001fea:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8001fec:	2000      	movs	r0, #0
 8001fee:	bd08      	pop	{r3, pc}

08001ff0 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8001ff0:	b510      	push	{r4, lr}
 8001ff2:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8001ff4:	2180      	movs	r1, #128	; 0x80
 8001ff6:	f000 fb0b 	bl	8002610 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8001ffa:	4620      	mov	r0, r4
}
 8001ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002000:	2100      	movs	r1, #0
 8002002:	f000 bb05 	b.w	8002610 <USBD_LL_StallEP>
	...

08002008 <USBD_StdDevReq>:
{
 8002008:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 800200a:	784b      	ldrb	r3, [r1, #1]
{
 800200c:	4604      	mov	r4, r0
 800200e:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002010:	2b09      	cmp	r3, #9
 8002012:	d879      	bhi.n	8002108 <USBD_StdDevReq+0x100>
 8002014:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002018:	00e500c9 	.word	0x00e500c9
 800201c:	00d90078 	.word	0x00d90078
 8002020:	006d0078 	.word	0x006d0078
 8002024:	0078000a 	.word	0x0078000a
 8002028:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 800202c:	884b      	ldrh	r3, [r1, #2]
 800202e:	0a1a      	lsrs	r2, r3, #8
 8002030:	3a01      	subs	r2, #1
 8002032:	2a06      	cmp	r2, #6
 8002034:	d868      	bhi.n	8002108 <USBD_StdDevReq+0x100>
 8002036:	e8df f002 	tbb	[pc, r2]
 800203a:	1c04      	.short	0x1c04
 800203c:	49676729 	.word	0x49676729
 8002040:	52          	.byte	0x52
 8002041:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002042:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002046:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002048:	f10d 0106 	add.w	r1, sp, #6
 800204c:	7c20      	ldrb	r0, [r4, #16]
 800204e:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002050:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002054:	2a00      	cmp	r2, #0
 8002056:	d067      	beq.n	8002128 <USBD_StdDevReq+0x120>
 8002058:	88eb      	ldrh	r3, [r5, #6]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d064      	beq.n	8002128 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800205e:	429a      	cmp	r2, r3
 8002060:	bf28      	it	cs
 8002062:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 8002064:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 8002066:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800206a:	4620      	mov	r0, r4
 800206c:	f000 f97c 	bl	8002368 <USBD_CtlSendData>
 8002070:	e05a      	b.n	8002128 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002072:	7c02      	ldrb	r2, [r0, #16]
 8002074:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002078:	b932      	cbnz	r2, 8002088 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800207c:	f10d 0006 	add.w	r0, sp, #6
 8002080:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002082:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002084:	7043      	strb	r3, [r0, #1]
 8002086:	e7e3      	b.n	8002050 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208a:	e7f7      	b.n	800207c <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b05      	cmp	r3, #5
 8002090:	d83a      	bhi.n	8002108 <USBD_StdDevReq+0x100>
 8002092:	e8df f003 	tbb	[pc, r3]
 8002096:	0703      	.short	0x0703
 8002098:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800209c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	e7d1      	b.n	8002048 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80020a4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	e7cd      	b.n	8002048 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80020ac:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	e7c9      	b.n	8002048 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80020b4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	e7c5      	b.n	8002048 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80020bc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	e7c1      	b.n	8002048 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80020c4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	e7bd      	b.n	8002048 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80020cc:	7c03      	ldrb	r3, [r0, #16]
 80020ce:	b9db      	cbnz	r3, 8002108 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80020d0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80020d4:	f10d 0006 	add.w	r0, sp, #6
 80020d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020da:	4798      	blx	r3
 80020dc:	e7b8      	b.n	8002050 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80020de:	7c03      	ldrb	r3, [r0, #16]
 80020e0:	b993      	cbnz	r3, 8002108 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80020e2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80020e6:	f10d 0006 	add.w	r0, sp, #6
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80020ee:	2307      	movs	r3, #7
 80020f0:	e7c8      	b.n	8002084 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80020f2:	888b      	ldrh	r3, [r1, #4]
 80020f4:	b943      	cbnz	r3, 8002108 <USBD_StdDevReq+0x100>
 80020f6:	88cb      	ldrh	r3, [r1, #6]
 80020f8:	b933      	cbnz	r3, 8002108 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80020fa:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80020fe:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002100:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002102:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002106:	d103      	bne.n	8002110 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8002108:	4620      	mov	r0, r4
 800210a:	f7ff ff71 	bl	8001ff0 <USBD_CtlError.constprop.0>
    break;
 800210e:	e00b      	b.n	8002128 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8002110:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002114:	4629      	mov	r1, r5
 8002116:	f000 faa7 	bl	8002668 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800211a:	4620      	mov	r0, r4
 800211c:	f000 f941 	bl	80023a2 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002120:	b12d      	cbz	r5, 800212e <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002122:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002124:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8002128:	2000      	movs	r0, #0
 800212a:	b003      	add	sp, #12
 800212c:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800212e:	2301      	movs	r3, #1
 8002130:	e7f8      	b.n	8002124 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8002132:	7889      	ldrb	r1, [r1, #2]
 8002134:	4d30      	ldr	r5, [pc, #192]	; (80021f8 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002136:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8002138:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800213a:	d8e5      	bhi.n	8002108 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 800213c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002140:	2b02      	cmp	r3, #2
 8002142:	d00c      	beq.n	800215e <USBD_StdDevReq+0x156>
 8002144:	2b03      	cmp	r3, #3
 8002146:	d1df      	bne.n	8002108 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8002148:	b9b1      	cbnz	r1, 8002178 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800214a:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 800214c:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800214e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 8002152:	f7ff fe5b 	bl	8001e0c <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8002156:	4620      	mov	r0, r4
 8002158:	f000 f923 	bl	80023a2 <USBD_CtlSendStatus>
 800215c:	e7e4      	b.n	8002128 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800215e:	2900      	cmp	r1, #0
 8002160:	d0f9      	beq.n	8002156 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8002162:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002164:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002166:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002168:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800216c:	4620      	mov	r0, r4
 800216e:	f7ff fe42 	bl	8001df6 <USBD_SetClassConfig>
 8002172:	2802      	cmp	r0, #2
 8002174:	d1ef      	bne.n	8002156 <USBD_StdDevReq+0x14e>
 8002176:	e7c7      	b.n	8002108 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8002178:	6841      	ldr	r1, [r0, #4]
 800217a:	2901      	cmp	r1, #1
 800217c:	d0eb      	beq.n	8002156 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800217e:	b2c9      	uxtb	r1, r1
 8002180:	f7ff fe44 	bl	8001e0c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002184:	7829      	ldrb	r1, [r5, #0]
 8002186:	6061      	str	r1, [r4, #4]
 8002188:	e7f0      	b.n	800216c <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800218a:	88ca      	ldrh	r2, [r1, #6]
 800218c:	2a01      	cmp	r2, #1
 800218e:	d1bb      	bne.n	8002108 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8002190:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002194:	2b02      	cmp	r3, #2
 8002196:	d003      	beq.n	80021a0 <USBD_StdDevReq+0x198>
 8002198:	2b03      	cmp	r3, #3
 800219a:	d1b5      	bne.n	8002108 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 800219c:	1d01      	adds	r1, r0, #4
 800219e:	e764      	b.n	800206a <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 80021a0:	4601      	mov	r1, r0
 80021a2:	2300      	movs	r3, #0
 80021a4:	f841 3f08 	str.w	r3, [r1, #8]!
 80021a8:	e75f      	b.n	800206a <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 80021aa:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80021ae:	3b02      	subs	r3, #2
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d8a9      	bhi.n	8002108 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80021b4:	2301      	movs	r3, #1
 80021b6:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80021b8:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80021bc:	b10b      	cbz	r3, 80021c2 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80021be:	2303      	movs	r3, #3
 80021c0:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 80021c2:	2202      	movs	r2, #2
 80021c4:	f104 010c 	add.w	r1, r4, #12
 80021c8:	e74f      	b.n	800206a <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80021ca:	884b      	ldrh	r3, [r1, #2]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d1ab      	bne.n	8002128 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80021d0:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80021d4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80021d8:	4629      	mov	r1, r5
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4620      	mov	r0, r4
 80021de:	4798      	blx	r3
 80021e0:	e7b9      	b.n	8002156 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 80021e2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80021e6:	3b02      	subs	r3, #2
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d88d      	bhi.n	8002108 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80021ec:	884b      	ldrh	r3, [r1, #2]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d19a      	bne.n	8002128 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80021f2:	2300      	movs	r3, #0
 80021f4:	e7ec      	b.n	80021d0 <USBD_StdDevReq+0x1c8>
 80021f6:	bf00      	nop
 80021f8:	2000011c 	.word	0x2000011c

080021fc <USBD_StdItfReq>:
{
 80021fc:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80021fe:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 8002202:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8002204:	2b03      	cmp	r3, #3
{
 8002206:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8002208:	d10d      	bne.n	8002226 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800220a:	790b      	ldrb	r3, [r1, #4]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d80a      	bhi.n	8002226 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002210:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002218:	88eb      	ldrh	r3, [r5, #6]
 800221a:	b913      	cbnz	r3, 8002222 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 800221c:	4620      	mov	r0, r4
 800221e:	f000 f8c0 	bl	80023a2 <USBD_CtlSendStatus>
}
 8002222:	2000      	movs	r0, #0
 8002224:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8002226:	f7ff fee3 	bl	8001ff0 <USBD_CtlError.constprop.0>
    break;
 800222a:	e7fa      	b.n	8002222 <USBD_StdItfReq+0x26>

0800222c <USBD_StdEPReq>:
{
 800222c:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 800222e:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8002230:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8002232:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002236:	2a20      	cmp	r2, #32
{
 8002238:	4604      	mov	r4, r0
 800223a:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800223c:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 800223e:	d105      	bne.n	800224c <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8002240:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	4798      	blx	r3
}
 8002248:	2000      	movs	r0, #0
 800224a:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 800224c:	784a      	ldrb	r2, [r1, #1]
 800224e:	2a01      	cmp	r2, #1
 8002250:	d01c      	beq.n	800228c <USBD_StdEPReq+0x60>
 8002252:	d32a      	bcc.n	80022aa <USBD_StdEPReq+0x7e>
 8002254:	2a03      	cmp	r2, #3
 8002256:	d1f7      	bne.n	8002248 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002258:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800225c:	2a02      	cmp	r2, #2
 800225e:	d040      	beq.n	80022e2 <USBD_StdEPReq+0xb6>
 8002260:	2a03      	cmp	r2, #3
 8002262:	d002      	beq.n	800226a <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8002264:	f7ff fec4 	bl	8001ff0 <USBD_CtlError.constprop.0>
      break;
 8002268:	e7ee      	b.n	8002248 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800226a:	884a      	ldrh	r2, [r1, #2]
 800226c:	b922      	cbnz	r2, 8002278 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800226e:	065e      	lsls	r6, r3, #25
 8002270:	d002      	beq.n	8002278 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8002272:	4619      	mov	r1, r3
 8002274:	f000 f9cc 	bl	8002610 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8002278:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800227c:	4629      	mov	r1, r5
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4620      	mov	r0, r4
 8002282:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002284:	4620      	mov	r0, r4
 8002286:	f000 f88c 	bl	80023a2 <USBD_CtlSendStatus>
 800228a:	e7dd      	b.n	8002248 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 800228c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002290:	2a02      	cmp	r2, #2
 8002292:	d026      	beq.n	80022e2 <USBD_StdEPReq+0xb6>
 8002294:	2a03      	cmp	r2, #3
 8002296:	d1e5      	bne.n	8002264 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002298:	884a      	ldrh	r2, [r1, #2]
 800229a:	2a00      	cmp	r2, #0
 800229c:	d1d4      	bne.n	8002248 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 800229e:	0659      	lsls	r1, r3, #25
 80022a0:	d0f0      	beq.n	8002284 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80022a2:	4619      	mov	r1, r3
 80022a4:	f000 f9c2 	bl	800262c <USBD_LL_ClearStallEP>
 80022a8:	e7e6      	b.n	8002278 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80022aa:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80022ae:	2a02      	cmp	r2, #2
 80022b0:	d017      	beq.n	80022e2 <USBD_StdEPReq+0xb6>
 80022b2:	2a03      	cmp	r2, #3
 80022b4:	d1d6      	bne.n	8002264 <USBD_StdEPReq+0x38>
 80022b6:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80022ba:	f016 0f80 	tst.w	r6, #128	; 0x80
 80022be:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80022c2:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80022c4:	bf14      	ite	ne
 80022c6:	3514      	addne	r5, #20
 80022c8:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80022cc:	f000 f9bc 	bl	8002648 <USBD_LL_IsStallEP>
 80022d0:	b168      	cbz	r0, 80022ee <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 80022d2:	2301      	movs	r3, #1
 80022d4:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 80022d6:	2202      	movs	r2, #2
 80022d8:	4629      	mov	r1, r5
 80022da:	4620      	mov	r0, r4
 80022dc:	f000 f844 	bl	8002368 <USBD_CtlSendData>
      break;
 80022e0:	e7b2      	b.n	8002248 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 80022e2:	065a      	lsls	r2, r3, #25
 80022e4:	d0b0      	beq.n	8002248 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 80022e6:	4619      	mov	r1, r3
 80022e8:	f000 f992 	bl	8002610 <USBD_LL_StallEP>
 80022ec:	e7ac      	b.n	8002248 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 80022ee:	6028      	str	r0, [r5, #0]
 80022f0:	e7f1      	b.n	80022d6 <USBD_StdEPReq+0xaa>

080022f2 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80022f2:	780b      	ldrb	r3, [r1, #0]
 80022f4:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80022f6:	784b      	ldrb	r3, [r1, #1]
 80022f8:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80022fa:	78ca      	ldrb	r2, [r1, #3]
 80022fc:	788b      	ldrb	r3, [r1, #2]
 80022fe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002302:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002304:	794a      	ldrb	r2, [r1, #5]
 8002306:	790b      	ldrb	r3, [r1, #4]
 8002308:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800230c:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800230e:	79ca      	ldrb	r2, [r1, #7]
 8002310:	798b      	ldrb	r3, [r1, #6]
 8002312:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002316:	80c3      	strh	r3, [r0, #6]
 8002318:	4770      	bx	lr

0800231a <USBD_CtlError>:
{
 800231a:	b510      	push	{r4, lr}
 800231c:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800231e:	2180      	movs	r1, #128	; 0x80
 8002320:	f000 f976 	bl	8002610 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002324:	4620      	mov	r0, r4
}
 8002326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800232a:	2100      	movs	r1, #0
 800232c:	f000 b970 	b.w	8002610 <USBD_LL_StallEP>

08002330 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002330:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002332:	b188      	cbz	r0, 8002358 <USBD_GetString+0x28>
 8002334:	4605      	mov	r5, r0
 8002336:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8002338:	f815 4b01 	ldrb.w	r4, [r5], #1
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2c00      	cmp	r4, #0
 8002340:	d1f9      	bne.n	8002336 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	3302      	adds	r3, #2
 8002346:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8002348:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800234a:	2303      	movs	r3, #3
 800234c:	704b      	strb	r3, [r1, #1]
 800234e:	2302      	movs	r3, #2
 8002350:	3801      	subs	r0, #1
    while (*desc != '\0') 
 8002352:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002356:	b905      	cbnz	r5, 800235a <USBD_GetString+0x2a>
 8002358:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	54cd      	strb	r5, [r1, r3]
 800235e:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8002360:	3302      	adds	r3, #2
 8002362:	b2db      	uxtb	r3, r3
 8002364:	548c      	strb	r4, [r1, r2]
 8002366:	e7f4      	b.n	8002352 <USBD_GetString+0x22>

08002368 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002368:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800236a:	2202      	movs	r2, #2
{
 800236c:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800236e:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002372:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002374:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002376:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002378:	2100      	movs	r1, #0
 800237a:	f000 f983 	bl	8002684 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800237e:	2000      	movs	r0, #0
 8002380:	bd10      	pop	{r4, pc}

08002382 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002382:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002384:	4613      	mov	r3, r2
 8002386:	460a      	mov	r2, r1
 8002388:	2100      	movs	r1, #0
 800238a:	f000 f97b 	bl	8002684 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800238e:	2000      	movs	r0, #0
 8002390:	bd08      	pop	{r3, pc}

08002392 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002392:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002394:	4613      	mov	r3, r2
 8002396:	460a      	mov	r2, r1
 8002398:	2100      	movs	r1, #0
 800239a:	f000 f981 	bl	80026a0 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800239e:	2000      	movs	r0, #0
 80023a0:	bd08      	pop	{r3, pc}

080023a2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80023a2:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80023a4:	2304      	movs	r3, #4
 80023a6:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80023aa:	2300      	movs	r3, #0
 80023ac:	461a      	mov	r2, r3
 80023ae:	4619      	mov	r1, r3
 80023b0:	f000 f968 	bl	8002684 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80023b4:	2000      	movs	r0, #0
 80023b6:	bd08      	pop	{r3, pc}

080023b8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80023b8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80023ba:	2305      	movs	r3, #5
 80023bc:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80023c0:	2300      	movs	r3, #0
 80023c2:	461a      	mov	r2, r3
 80023c4:	4619      	mov	r1, r3
 80023c6:	f000 f96b 	bl	80026a0 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80023ca:	2000      	movs	r0, #0
 80023cc:	bd08      	pop	{r3, pc}
	...

080023d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80023d0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80023d2:	4c07      	ldr	r4, [pc, #28]	; (80023f0 <MX_USB_DEVICE_Init+0x20>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	4907      	ldr	r1, [pc, #28]	; (80023f4 <MX_USB_DEVICE_Init+0x24>)
 80023d8:	4620      	mov	r0, r4
 80023da:	f7ff fceb 	bl	8001db4 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID);
 80023de:	4620      	mov	r0, r4
 80023e0:	4905      	ldr	r1, [pc, #20]	; (80023f8 <MX_USB_DEVICE_Init+0x28>)
 80023e2:	f7ff fcfc 	bl	8001dde <USBD_RegisterClass>

  USBD_Start(&hUsbDeviceFS);
 80023e6:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80023e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 80023ec:	f7ff bcfe 	b.w	8001dec <USBD_Start>
 80023f0:	20000138 	.word	0x20000138
 80023f4:	200000cc 	.word	0x200000cc
 80023f8:	20000058 	.word	0x20000058

080023fc <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 80023fc:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80023fe:	4801      	ldr	r0, [pc, #4]	; (8002404 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8002400:	800b      	strh	r3, [r1, #0]
}
 8002402:	4770      	bx	lr
 8002404:	200000e8 	.word	0x200000e8

08002408 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8002408:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800240a:	4801      	ldr	r0, [pc, #4]	; (8002410 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800240c:	800b      	strh	r3, [r1, #0]
}
 800240e:	4770      	bx	lr
 8002410:	200000fc 	.word	0x200000fc

08002414 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002414:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002416:	4c04      	ldr	r4, [pc, #16]	; (8002428 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8002418:	460a      	mov	r2, r1
 800241a:	4804      	ldr	r0, [pc, #16]	; (800242c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800241c:	4621      	mov	r1, r4
 800241e:	f7ff ff87 	bl	8002330 <USBD_GetString>
  return USBD_StrDesc;
}
 8002422:	4620      	mov	r0, r4
 8002424:	bd10      	pop	{r4, pc}
 8002426:	bf00      	nop
 8002428:	2000035c 	.word	0x2000035c
 800242c:	080027bd 	.word	0x080027bd

08002430 <USBD_FS_ProductStrDescriptor>:
{
 8002430:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002432:	4c04      	ldr	r4, [pc, #16]	; (8002444 <USBD_FS_ProductStrDescriptor+0x14>)
 8002434:	460a      	mov	r2, r1
 8002436:	4804      	ldr	r0, [pc, #16]	; (8002448 <USBD_FS_ProductStrDescriptor+0x18>)
 8002438:	4621      	mov	r1, r4
 800243a:	f7ff ff79 	bl	8002330 <USBD_GetString>
}
 800243e:	4620      	mov	r0, r4
 8002440:	bd10      	pop	{r4, pc}
 8002442:	bf00      	nop
 8002444:	2000035c 	.word	0x2000035c
 8002448:	080027d0 	.word	0x080027d0

0800244c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800244c:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800244e:	4c04      	ldr	r4, [pc, #16]	; (8002460 <USBD_FS_SerialStrDescriptor+0x14>)
 8002450:	460a      	mov	r2, r1
 8002452:	4804      	ldr	r0, [pc, #16]	; (8002464 <USBD_FS_SerialStrDescriptor+0x18>)
 8002454:	4621      	mov	r1, r4
 8002456:	f7ff ff6b 	bl	8002330 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800245a:	4620      	mov	r0, r4
 800245c:	bd10      	pop	{r4, pc}
 800245e:	bf00      	nop
 8002460:	2000035c 	.word	0x2000035c
 8002464:	080027e6 	.word	0x080027e6

08002468 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002468:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800246a:	4c04      	ldr	r4, [pc, #16]	; (800247c <USBD_FS_ConfigStrDescriptor+0x14>)
 800246c:	460a      	mov	r2, r1
 800246e:	4804      	ldr	r0, [pc, #16]	; (8002480 <USBD_FS_ConfigStrDescriptor+0x18>)
 8002470:	4621      	mov	r1, r4
 8002472:	f7ff ff5d 	bl	8002330 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002476:	4620      	mov	r0, r4
 8002478:	bd10      	pop	{r4, pc}
 800247a:	bf00      	nop
 800247c:	2000035c 	.word	0x2000035c
 8002480:	080027a4 	.word	0x080027a4

08002484 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002484:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002486:	4c04      	ldr	r4, [pc, #16]	; (8002498 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8002488:	460a      	mov	r2, r1
 800248a:	4804      	ldr	r0, [pc, #16]	; (800249c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800248c:	4621      	mov	r1, r4
 800248e:	f7ff ff4f 	bl	8002330 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002492:	4620      	mov	r0, r4
 8002494:	bd10      	pop	{r4, pc}
 8002496:	bf00      	nop
 8002498:	2000035c 	.word	0x2000035c
 800249c:	080027af 	.word	0x080027af

080024a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80024a0:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <HAL_PCD_MspInit+0x38>)
 80024a4:	6802      	ldr	r2, [r0, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d112      	bne.n	80024d0 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80024aa:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80024ae:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80024b0:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80024b2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024b6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80024b8:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80024ba:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80024bc:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80024be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80024c6:	f7fd ffa5 	bl	8000414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80024ca:	2014      	movs	r0, #20
 80024cc:	f7fd ffd6 	bl	800047c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80024d0:	b003      	add	sp, #12
 80024d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80024d6:	bf00      	nop
 80024d8:	40005c00 	.word	0x40005c00

080024dc <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80024dc:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 80024e0:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80024e4:	f7ff bc99 	b.w	8001e1a <USBD_LL_SetupStage>

080024e8 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80024e8:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80024ec:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 80024f0:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80024f4:	f7ff bcbe 	b.w	8001e74 <USBD_LL_DataOutStage>

080024f8 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80024f8:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80024fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024fe:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002502:	f7ff bce9 	b.w	8001ed8 <USBD_LL_DataInStage>

08002506 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002506:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800250a:	f7ff bd65 	b.w	8001fd8 <USBD_LL_SOF>

0800250e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800250e:	b510      	push	{r4, lr}
 8002510:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002512:	2101      	movs	r1, #1
 8002514:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002518:	f7ff fd4c 	bl	8001fb4 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800251c:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8002520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002524:	f7ff bd27 	b.w	8001f76 <USBD_LL_Reset>

08002528 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002528:	b510      	push	{r4, lr}
 800252a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800252c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002530:	f7ff fd43 	bl	8001fba <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002534:	69a3      	ldr	r3, [r4, #24]
 8002536:	b123      	cbz	r3, 8002542 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002538:	4a02      	ldr	r2, [pc, #8]	; (8002544 <HAL_PCD_SuspendCallback+0x1c>)
 800253a:	6913      	ldr	r3, [r2, #16]
 800253c:	f043 0306 	orr.w	r3, r3, #6
 8002540:	6113      	str	r3, [r2, #16]
 8002542:	bd10      	pop	{r4, pc}
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002548:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800254c:	f7ff bd3e 	b.w	8001fcc <USBD_LL_Resume>

08002550 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8002550:	b510      	push	{r4, lr}
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002552:	2302      	movs	r3, #2
 8002554:	2208      	movs	r2, #8
 8002556:	f04f 0e03 	mov.w	lr, #3
{
 800255a:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 800255c:	4914      	ldr	r1, [pc, #80]	; (80025b0 <USBD_LL_Init+0x60>)
  hpcd_USB_FS.pData = pdev;
 800255e:	4815      	ldr	r0, [pc, #84]	; (80025b4 <USBD_LL_Init+0x64>)
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002560:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002564:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8002566:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 800256a:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800256e:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002570:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002572:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002574:	f7fe f88d 	bl	8000692 <HAL_PCD_Init>
 8002578:	b108      	cbz	r0, 800257e <USBD_LL_Init+0x2e>
  {
    Error_Handler( );
 800257a:	f7fd fe85 	bl	8000288 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800257e:	2200      	movs	r2, #0
 8002580:	2318      	movs	r3, #24
 8002582:	4611      	mov	r1, r2
 8002584:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002588:	f7fe fc4e 	bl	8000e28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800258c:	2358      	movs	r3, #88	; 0x58
 800258e:	2200      	movs	r2, #0
 8002590:	2180      	movs	r1, #128	; 0x80
 8002592:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002596:	f7fe fc47 	bl	8000e28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800259a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800259e:	2200      	movs	r2, #0
 80025a0:	2181      	movs	r1, #129	; 0x81
 80025a2:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80025a6:	f7fe fc3f 	bl	8000e28 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 80025aa:	2000      	movs	r0, #0
 80025ac:	bd10      	pop	{r4, pc}
 80025ae:	bf00      	nop
 80025b0:	40005c00 	.word	0x40005c00
 80025b4:	2000055c 	.word	0x2000055c

080025b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80025b8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80025ba:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80025be:	f7fe f8d1 	bl	8000764 <HAL_PCD_Start>
 80025c2:	2803      	cmp	r0, #3
 80025c4:	bf9a      	itte	ls
 80025c6:	4b02      	ldrls	r3, [pc, #8]	; (80025d0 <USBD_LL_Start+0x18>)
 80025c8:	5c18      	ldrbls	r0, [r3, r0]
 80025ca:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80025cc:	bd08      	pop	{r3, pc}
 80025ce:	bf00      	nop
 80025d0:	080027f3 	.word	0x080027f3

080025d4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80025d4:	b510      	push	{r4, lr}
 80025d6:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80025d8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80025dc:	4613      	mov	r3, r2
 80025de:	4622      	mov	r2, r4
 80025e0:	f7fe f8eb 	bl	80007ba <HAL_PCD_EP_Open>
 80025e4:	2803      	cmp	r0, #3
 80025e6:	bf9a      	itte	ls
 80025e8:	4b01      	ldrls	r3, [pc, #4]	; (80025f0 <USBD_LL_OpenEP+0x1c>)
 80025ea:	5c18      	ldrbls	r0, [r3, r0]
 80025ec:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80025ee:	bd10      	pop	{r4, pc}
 80025f0:	080027f3 	.word	0x080027f3

080025f4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80025f4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80025f6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80025fa:	f7fe f901 	bl	8000800 <HAL_PCD_EP_Close>
 80025fe:	2803      	cmp	r0, #3
 8002600:	bf9a      	itte	ls
 8002602:	4b02      	ldrls	r3, [pc, #8]	; (800260c <USBD_LL_CloseEP+0x18>)
 8002604:	5c18      	ldrbls	r0, [r3, r0]
 8002606:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002608:	bd08      	pop	{r3, pc}
 800260a:	bf00      	nop
 800260c:	080027f3 	.word	0x080027f3

08002610 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002610:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002612:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002616:	f7fe fbbb 	bl	8000d90 <HAL_PCD_EP_SetStall>
 800261a:	2803      	cmp	r0, #3
 800261c:	bf9a      	itte	ls
 800261e:	4b02      	ldrls	r3, [pc, #8]	; (8002628 <USBD_LL_StallEP+0x18>)
 8002620:	5c18      	ldrbls	r0, [r3, r0]
 8002622:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002624:	bd08      	pop	{r3, pc}
 8002626:	bf00      	nop
 8002628:	080027f3 	.word	0x080027f3

0800262c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800262c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800262e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002632:	f7fe fbd6 	bl	8000de2 <HAL_PCD_EP_ClrStall>
 8002636:	2803      	cmp	r0, #3
 8002638:	bf9a      	itte	ls
 800263a:	4b02      	ldrls	r3, [pc, #8]	; (8002644 <USBD_LL_ClearStallEP+0x18>)
 800263c:	5c18      	ldrbls	r0, [r3, r0]
 800263e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002640:	bd08      	pop	{r3, pc}
 8002642:	bf00      	nop
 8002644:	080027f3 	.word	0x080027f3

08002648 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002648:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800264a:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800264e:	bf45      	ittet	mi
 8002650:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8002654:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002658:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800265c:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002660:	bf58      	it	pl
 8002662:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 8002666:	4770      	bx	lr

08002668 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002668:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800266a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800266e:	f7fe f890 	bl	8000792 <HAL_PCD_SetAddress>
 8002672:	2803      	cmp	r0, #3
 8002674:	bf9a      	itte	ls
 8002676:	4b02      	ldrls	r3, [pc, #8]	; (8002680 <USBD_LL_SetUSBAddress+0x18>)
 8002678:	5c18      	ldrbls	r0, [r3, r0]
 800267a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 800267c:	bd08      	pop	{r3, pc}
 800267e:	bf00      	nop
 8002680:	080027f3 	.word	0x080027f3

08002684 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002684:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002686:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800268a:	f7fe f8f2 	bl	8000872 <HAL_PCD_EP_Transmit>
 800268e:	2803      	cmp	r0, #3
 8002690:	bf9a      	itte	ls
 8002692:	4b02      	ldrls	r3, [pc, #8]	; (800269c <USBD_LL_Transmit+0x18>)
 8002694:	5c18      	ldrbls	r0, [r3, r0]
 8002696:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8002698:	bd08      	pop	{r3, pc}
 800269a:	bf00      	nop
 800269c:	080027f3 	.word	0x080027f3

080026a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80026a0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80026a2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80026a6:	f7fe f8cc 	bl	8000842 <HAL_PCD_EP_Receive>
 80026aa:	2803      	cmp	r0, #3
 80026ac:	bf9a      	itte	ls
 80026ae:	4b02      	ldrls	r3, [pc, #8]	; (80026b8 <USBD_LL_PrepareReceive+0x18>)
 80026b0:	5c18      	ldrbls	r0, [r3, r0]
 80026b2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80026b4:	bd08      	pop	{r3, pc}
 80026b6:	bf00      	nop
 80026b8:	080027f3 	.word	0x080027f3

080026bc <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 80026bc:	4800      	ldr	r0, [pc, #0]	; (80026c0 <USBD_static_malloc+0x4>)
 80026be:	4770      	bx	lr
 80026c0:	20000120 	.word	0x20000120

080026c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80026c4:	4770      	bx	lr

080026c6 <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 80026c6:	4770      	bx	lr

080026c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80026c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80026ca:	e003      	b.n	80026d4 <LoopCopyDataInit>

080026cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80026ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80026d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80026d2:	3104      	adds	r1, #4

080026d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80026d4:	480a      	ldr	r0, [pc, #40]	; (8002700 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80026d6:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80026d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80026da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80026dc:	d3f6      	bcc.n	80026cc <CopyDataInit>
  ldr r2, =_sbss
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80026e0:	e002      	b.n	80026e8 <LoopFillZerobss>

080026e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80026e4:	f842 3b04 	str.w	r3, [r2], #4

080026e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80026ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80026ec:	d3f9      	bcc.n	80026e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026ee:	f7fd fdff 	bl	80002f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026f2:	f000 f80f 	bl	8002714 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026f6:	f7fd fd61 	bl	80001bc <main>
  bx lr
 80026fa:	4770      	bx	lr
  ldr r3, =_sidata
 80026fc:	08002800 	.word	0x08002800
  ldr r0, =_sdata
 8002700:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002704:	20000100 	.word	0x20000100
  ldr r2, =_sbss
 8002708:	20000100 	.word	0x20000100
  ldr r3, = _ebss
 800270c:	200009bc 	.word	0x200009bc

08002710 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002710:	e7fe      	b.n	8002710 <ADC1_2_IRQHandler>
	...

08002714 <__libc_init_array>:
 8002714:	b570      	push	{r4, r5, r6, lr}
 8002716:	2500      	movs	r5, #0
 8002718:	4e0c      	ldr	r6, [pc, #48]	; (800274c <__libc_init_array+0x38>)
 800271a:	4c0d      	ldr	r4, [pc, #52]	; (8002750 <__libc_init_array+0x3c>)
 800271c:	1ba4      	subs	r4, r4, r6
 800271e:	10a4      	asrs	r4, r4, #2
 8002720:	42a5      	cmp	r5, r4
 8002722:	d109      	bne.n	8002738 <__libc_init_array+0x24>
 8002724:	f000 f822 	bl	800276c <_init>
 8002728:	2500      	movs	r5, #0
 800272a:	4e0a      	ldr	r6, [pc, #40]	; (8002754 <__libc_init_array+0x40>)
 800272c:	4c0a      	ldr	r4, [pc, #40]	; (8002758 <__libc_init_array+0x44>)
 800272e:	1ba4      	subs	r4, r4, r6
 8002730:	10a4      	asrs	r4, r4, #2
 8002732:	42a5      	cmp	r5, r4
 8002734:	d105      	bne.n	8002742 <__libc_init_array+0x2e>
 8002736:	bd70      	pop	{r4, r5, r6, pc}
 8002738:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800273c:	4798      	blx	r3
 800273e:	3501      	adds	r5, #1
 8002740:	e7ee      	b.n	8002720 <__libc_init_array+0xc>
 8002742:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002746:	4798      	blx	r3
 8002748:	3501      	adds	r5, #1
 800274a:	e7f2      	b.n	8002732 <__libc_init_array+0x1e>
 800274c:	080027f8 	.word	0x080027f8
 8002750:	080027f8 	.word	0x080027f8
 8002754:	080027f8 	.word	0x080027f8
 8002758:	080027fc 	.word	0x080027fc

0800275c <memset>:
 800275c:	4603      	mov	r3, r0
 800275e:	4402      	add	r2, r0
 8002760:	4293      	cmp	r3, r2
 8002762:	d100      	bne.n	8002766 <memset+0xa>
 8002764:	4770      	bx	lr
 8002766:	f803 1b01 	strb.w	r1, [r3], #1
 800276a:	e7f9      	b.n	8002760 <memset+0x4>

0800276c <_init>:
 800276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276e:	bf00      	nop
 8002770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002772:	bc08      	pop	{r3}
 8002774:	469e      	mov	lr, r3
 8002776:	4770      	bx	lr

08002778 <_fini>:
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	bf00      	nop
 800277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277e:	bc08      	pop	{r3}
 8002780:	469e      	mov	lr, r3
 8002782:	4770      	bx	lr
